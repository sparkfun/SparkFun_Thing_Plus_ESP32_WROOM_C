{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Introduction","text":"<p>Note</p> <p>This guide is specific to the ESP32 Thing Plus (USB-C) board variant. For the variants with the USB micro-B connector, please refer to the ESP32 Thing Plus hookup guide.</p> <p> </p>"},{"location":"#sparkfun-thing-plus-esp32-wroom-usb-c","title":"SparkFun Thing Plus - ESP32 WROOM (USB-C)","text":"<p>The SparkFun ESP32-WROOM Thing Plus (USB-C) enjoys all the features of our previous ESP32 Thing Plus (Micro-B) boards, but with a few improvements. For this variant, we have included an SD card slot, upgraded to a USB-C connector, integrated an RGB status LED and battery fuel gauge, and provided two voltage regulators; offering separate 700mA current sources for the board and Qwiic connector. The board still retains its standardized 28-pin Feather footprint, 2-pin JST battery connector, and Qwiic connector like our other Thing Plus boards.</p> <p>"},{"location":"#sparkfun-thing-plus-esp32-wroom-usb-c_1","title":"SparkFun Thing Plus - ESP32 WROOM (USB-C)","text":"<p>(WRL-20168) </p> <p> <p></p> <p>The ESP32-WROOM module on the board provides a rich set of peripherals, ranging from capacitive touch sensors, Hall sensors, SD card interface, Ethernet, high-speed SPI, UART, I<sup>2</sup>S, and I<sup>2</sup>C. With Espressif's ESP32 comprehensive development platform and Bluetooth low-energy support (i.e BLE, BT4.0, Bluetooth Smart) these boards are jam-packed with possibilities!</p> <p>Note</p> <p>The CH340C serial-to-UART bridge is used on this board. Therefore, a different driver installation is required from previous versions of the ESP32 Thing Plus.</p> <p>Warning</p> <p><p>Not Yet Implemented: The Arduino core for the ESP32 microcontroller is still a work in progress. There are a handful of peripherals and features that have yet to be implemented, including:</p> <p><ul> <li>Analog Output (<code>analogWrite([pin], [value])</code>)         <ul> <li>Alternative: LED Control API</li> </ul> </li> <li>Pulse Counter</li> <li>SDIO</li> <li>Timer/Real-Time Clock         <ul> <li>Alternative: ESP32Time Arduino library</li> </ul> </li> <li>TWAI <p>The peripherals are available (if, also, still in their infancy) in the IoT Development Framework for the ESP32. If your application requires any of the features above, consider giving the ESP-IDF a try! (Updated: June 2022.)</p>"},{"location":"#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. Now some users may have a few of these items, feel free to modify your cart accordingly.</p> <ul> <li>SparkFun Thing Plus - ESP32 WROOM (USB-C)</li> <li>USB 3.1 Cable A to C - 3 Foot - The USB interface serves two purposes: it powers the board and allows users to upload programs. (*If your computer doesn't have a USB-A slot, then choose an appropriate cable or adapter.)</li> <li>Computer with an operating system (OS) that is compatible with all the software installation requirements.</li> </ul> USB 3.1 Cable A to C - 3 Foot              CAB-14743          SparkFun Thing Plus - ESP32 WROOM (USB-C)              WRL-20168"},{"location":"#headers-accessories","title":"Headers &amp; AccessoriesBreak Away Headers - StraightSparkFun Beginner Tool KitFeather Stackable Header KitPhoton Header - 12 Pin FemaleHeader - 8-pin Female (PTH, 0.1\")","text":"<p>Headers are great for development purposes, letting users swap parts with just a set of jumper wires. If you would like to add headers to your board, check out some of the options for the Thing Plus or Feather form factor boards below. For a full selection of our available Headers or Soldering Tools, click on the associated links.</p>              PRT-00116                       TOL-14681                       PRT-15187                       PRT-14321                        PRT-11895            <p>Note</p> <p><p>New to soldering? Check out our Through-Hole Soldering Tutorial for a quick introduction!</p> <p> How to Solder: Through-Hole Soldering </p></p>"},{"location":"#li-po-battery","title":"Li-Po BatteryLithium Ion Battery - 2AhLithium Ion Battery - 400mAhLithium Ion Battery - 1AhLithium Ion Battery - 110mAh","text":"<p>For mobile applications, users will want to pick up a single-cell LiPo battery from our catalog. Below, are a few available options:</p>              PRT-13855                       PRT-13851                       PRT-13813                       PRT-13853"},{"location":"#jumper-modification","title":"Jumper ModificationSolder Lead Free - 100-gram SpoolWeller WLC100 Soldering StationChip Quik No-Clean Flux Pen - 10mLHobby Knife","text":"<p>To modify the jumpers, users will need soldering equipment and/or a knife.</p>              TOL-09325                       TOL-14228                       TOL-14579                       TOL-09200          <p>Note</p> <p><p>New to jumpper pads? Check out our Jumper Pads and PCB Traces Tutorial for a quick introduction!</p> <p> How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"#suggested-reading","title":"Suggested Reading","text":"<p>As a more advanced development board, we will skip over the more fundamental tutorials (i.e. Ohm's Law and What is Electricity?). However, below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> Serial Communication Analog vs. Digital Pulse Width Modulation Logic Levels I2C Serial Peripheral Interface (SPI) How to Install CH340 Drivers ESP32 Thing Plus Hookup Guide Installing the Arduino IDE Installing Board Definitions in the Arduino IDE How to Solder: Through-Hole Soldering How to Work with Jumper Pads and PCB Traces <p> <p></p> <p>One of the new, advanced features of the board is that it takes advantage of the Qwiic connect system. We recommend familiarizing yourself with the Logic Levels and I<sup>2</sup>C tutorials.  Click on the banner above to learn more about Qwiic products.</p> <p> </p>"},{"location":"hard_copy/","title":"Hard Copies","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  from Single-Page View </li> <li>Download  (Beta - Mostly works, but some attributes may be broken.)</li> </ul>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"hardware_assembly/#usb-programming","title":"USB Programming","text":"<p>The USB connection is utilized for programming and serial communication. Users only need to plug their ESP32-WROOM Thing Plus into a computer using a USB-C cable.</p> <p> The ESP32-WROOM Thing Plus with USB-C cable attached. (Click to enlarge) </p>"},{"location":"hardware_assembly/#battery","title":"Battery","text":"<p>For remote IoT applications, a Li-Po battery can be connected. Additionally, users may be interested in utilizing a solar panel and USB-C cable to recharge their battery.</p> The ESP32-WROOM Thing Plus with a battery connected. (Click to enlarge) Solar Panel Charger - 10W              TOL-16835          USB 3.1 Cable A to C - 3 Foot              TOL-14743          <p>Note</p> <p><p>DO NOT remove batteries by pulling on their wires. Instead, it is recommended that pair of dikes (i.e. diagonal wire cutters), pliers, or tweezers be used to pull on the JST connector housing, to avoid damaging the battery wiring.</p> <p> Using a pair of dikes to disconnect a battery. (Click to enlarge) </p></p>"},{"location":"hardware_assembly/#headers","title":"Headers","text":"<p>The pins for the ESP32-WROOM Thing Plus are broken out to 0.1\"-spaced pins on the outer edges of the board. When selecting headers, be sure you are aware of the functionality you need. If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <p> Soldering headers to the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>The Feather Stackable Header Kit is a great option as it allows users to stack shields (w/ Feather footprint) or it can be placed on a breadboard; while the pins are still accessible from the female/male headers.</p>"},{"location":"hardware_assembly/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The ESP32-WROOM Thing Plus (USB-C) includes an \u00b5SD card slot on the back of the board. The cardholder functions through a push/pull operation. (The card slot doesn't include a spring retention mechanism; cards are held in place through friction.)</p> <p> Users can slide-in or pull-out a \u00b5SD card from the cardholder. (Click to enlarge) </p>"},{"location":"hardware_assembly/#qwiic-devices","title":"Qwiic Devices","text":"<p>The Qwiic system allows users to effortlessly prototype with a Qwiic compatible I<sup>2</sup>C device without soldering. Users can attach any Qwiic compatible sensor or board, with just a Qwiic cable. (*The example below, is for demonstration purposes and is not pertinent to the board functionality or this tutorial.)</p> <p> The BME688 environmental and VL53L1X distance Qwiic sensor boards connected to the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/","title":"Hardware overview tabs version","text":"<p>Note</p> <p>              All mentions of <code>GPIO</code> in this section will refer to the I/O pins of the ESP32-WROOM module as represented in the datasheets and pin numbers of the board definition in the ESP32 Arduino core. They do not correspond with the net names for the ThingPlus Form Factor device in the schematic. (The device in the schematic is primarily, used internally to facilitate the board design process; just ignore the naming of the <code>GPIO0</code> - <code>GPIO6</code> nets.) (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below. The listed measurements are in inches and the two mounting holes are compatible with 4-40 standoff screws.</p> <p> Board dimensions (PDF) for the ESP32-WROOM Thing Plus, in inches. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB connector is provided to power and program the board. For most users, it will be the primary programing interface for the ESP32.</p> <p> USB-C connector on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#ch340-serial-to-uart","title":"CH340 Serial-to-UART","text":"<p>The CH340 allows the ESP32-WROOM to communicate with a computer/host device through the board's USB-C connection. This allows the board to show up as a device on the serial (or COM) port of the computer. Users will need to install the latest drivers for the computer to recognize the board (see Software Overview section).</p>"},{"location":"hardware_overview-tabs_version/#power","title":"Power","text":"<p>The ESP32-WROOM Thing Plus only requires 3.3V to power the board. However, the simplest method to power the board is through the USB-C connector. Alternatively, the <code>3V3</code>, <code>VBAT</code>, and <code>VUSB</code> pins can also be used to supply power to the board.</p> <ul> <li><code>VUSB</code>:<ul> <li>The maximum voltage for the LDOs and charge controller is 6V.</li> <li>The minimum voltage for the charge controller is 3.75V.</li> </ul> </li> <li><code>VBAT</code>:<ul> <li>Should not be connected to anything other than a single-cell LiPo battery.</li> </ul> </li> <li><code>3V3</code>:<ul> <li>Requires a regulated 3.3V.</li> <li>Only powers the board and not the Qwiic connector.</li> </ul> </li> </ul> <p> ESP32-WROOM Thing Plus power connections. (Click to enlarge) </p> <p>Below, is a general summary of the power circuitry on the board:</p> <ul> <li><code>3V3</code> - Provides a regulated 3.3V from the USB (5V) power and/or battery connections.<ul> <li>Used to power the ESP32-WROOM module, \u00b5SD card slot, WS2812 RGB LED, CH340C Serial-to-UART bridge, and power LED.<ul> <li>The Qwiic connector is powered by its own voltage regulator, from the same power source(s).</li> </ul> </li> <li>The 3.3V XC6222 LDO regulator can source up to 700mA.<ul> <li>Output is controlled by the <code>EN</code> pin on the board.</li> </ul> </li> </ul> </li> <li><code>VUSB</code> - The voltage from the USB-C connector, usually 5V.<ul> <li>Power source for the entire board.<ul> <li>Powers the 3.3V voltage regulators and the battery charging circuit for <code>VBAT</code>.</li> </ul> </li> <li>Overides power from the battery through a P-channel MOSFET, when both are connected.</li> <li>Utilizes a BAT20J protection diode for the USB-C connection.</li> </ul> </li> <li><code>VBAT</code> - The voltage from the JST battery connector; meant for single cell LiPo batteries.<ul> <li>Provides power to the 3.3V voltage regulators and MAX17048 battery fuel gauge.</li> <li>The MCP73831 linear charge management controller is powered from the USB (5V) power supply.<ul> <li>The charge controller is configured for 500mA (max) rate of charge to a connected battery.</li> </ul> </li> </ul> </li> <li><code>GND</code> - The common ground or the 0V reference for the voltage supplies.</li> <li>Qwiic Connector - Provides a regulated 3.3V voltage from the USB (5V) power and/or battery connections.<ul> <li>Operates independently from the <code>3V3</code> pin, with its own voltage regulator.</li> <li>The 3.3V XC6222 LDO regulator can source up to 700mA.<ul> <li>Output is controlled by <code>GPIO 0</code> of the ESP32-WROOM.</li> </ul> </li> </ul> </li> </ul> <p>For more details, users can reference the schematic and the datasheets of the individual components in the power circuitry.</p>"},{"location":"hardware_overview-tabs_version/#power-status-led","title":"Power Status LED","text":"<p>The red, <code>PWR</code> LED will light up once 3.3V is supplied to the board; however, for most users, it will light up when 5V is supplied through the USB connection or when a LiPo battery is connected to the JST connector.</p> <p> ESP32-WROOM Thing Plus <code>PWR</code> status LED indicator. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#charging-circuit","title":"Charging Circuit","text":"<p>The charging circuit utilizes the MCP73831 linear charge management controller and is powered directly from the USB-C connector or <code>VUSB</code>. The controller is configured for a 500mA charge rate and active charging is indicated by the yellow, <code>CHG</code> LED. If the charge controller is shutdown or charging is complete, the <code>CHG</code> LED will turn off. For more information, please refer to the MCP73831 datasheet and the Indicator LEDs section below.</p>"},{"location":"hardware_overview-tabs_version/#power-control","title":"Power Control","text":"<p>The power source for the XC6222 LDO voltage regulators is controlled by a P-channel MOSFET. In addition, the 3.3V regulated output from the XC6222 LDOs are enabled by the control pin (<code>CE</code>).</p> <p> Circuits for the 3.3V power on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>The P-channel MOSFET operates based on the voltages at the MOSFET's gate and source pins. Depending on the power supplies connected to the board, the MOSFET will switch between the battery and USB-C connection as power sources for the XC6222 voltage regulators.</p>              Power             Source          MOSFET Power Control Description Gate Source              V<sub>GS</sub>             (V<sub>Gate</sub> - V<sub>Source</sub>)              MOSFET             Operation          USB Only V<sub>USB</sub> = 5V V<sub>USB</sub> - V<sub>f</sub>              V<sub>USB</sub> - (V<sub>USB</sub> - V<sub>f</sub>)             V<sub>GS</sub> = V<sub>f</sub>              MOSFET Off             R<sub>GS</sub> = \u221e             Switch Open          Power to the XC6222 is supplied by the USC-C connection.             Power from the USB-C connection is passed through the Schottky diode. Due to the voltage drop from the Schottky diode, the gate threshold voltage for the MOSFET is positive and equivalent to the diode's forward voltage (V<sub>f</sub>).Therefore, the MOSFET behaves as an open switch.          Battery Only V<sub>USB</sub> = 0V Dep. Mode:             V<sub>Source</sub> = 0 Charged Cap.:             V<sub>Batt</sub> = 3 - 4.2V          Dep. Mode:             V<sub>GS</sub> = 0 Charged Cap.:             V<sub>USB</sub> - V<sub>Batt</sub> = -V<sub>Batt</sub>             -3V &gt; V<sub>GS</sub> &gt; -4.2V                       MOSFET On             R<sub>GS</sub> = Low             Switch Closed          Power to the XC6222 is supplied from the battery connection.             As a depletion type P-channel MOSFET, the mosfet acts as a normally closed switch when the gate threshold voltage is zero. Therefore, power from the battery is able to charge the capacitor and create a negative gate threshold voltage. The MOSFET remains behaving as a closed switch and power to the XC6222 is provided from the battery.          USB &amp; Battery V<sub>USB</sub> = 5V V<sub>USB</sub> - V<sub>f</sub> V<sub>GS</sub> = V<sub>f</sub>              MOSFET Off             R<sub>GS</sub> = \u221e             Switch Open          Power to the XC6222 is supplied by the USC-C connection.             Power from the USB-C connection is passed through the Schottky diode. Due to the voltage drop from the Schottky diode, the gate threshold voltage for the MOSFET is positive and equivalent to the diode's forward voltage (V<sub>f</sub>).Therefore, the MOSFET behaves as an open switch.          <p>The control pin (<code>CE</code>) of the XC6222 LDOs also provides an additional amount of control for the board's power. By default, the regulated 3.3V output is enabled. To disable and shutdown the output voltage from the XC6222, the control pin needs to be pulled low (i.e. shorted to ground (<code>GND</code>)). For more information, please refer to the XC6222 datasheet.</p> <ul> <li>The 3.3V power for the board (<code>3V3</code>) is controlled by the <code>EN</code> pin, which is broken out on the board.</li> <li>The 3.3V power for the Qwiic connector is controlled by <code>GPIO 0</code> of the ESP32-WROOM.</li> </ul> <p> XC6222 control pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Warning</p> <p>\u26a1 Note: The BOOT button is also connected to <code>GPIO 0</code>. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"hardware_overview-tabs_version/#current-consumption","title":"Current Consumption","text":"<p>According to the specifications, the ESP32-WROOM draws about 240 mA during RF transmissions. With the WiFi example in this tutorial, have measured it to average around 140 mA and peak at 300 mA while actively transceiving. The table below, summarizes the approximate current draw of the ESP32-WROOM Thing Plus (USB-C) for various operational conditions. The measurements in the table below, were made with the Nordic Power Profiler Kit II.</p> Operation Avg. Current Draw              LiPo: 3.5V (Low &lt; 5%)              LiPo: 3.7V (~15%)              LiPo: 4.2V (~100%)              USB-C: 5V (No Battery) Idle (Blank Code)              63 mA 86 mA (peak)              63.5 mA 89 mA (peak)              64 mA 88.6 mA (peak)              67 mA 89.9 mA (peak) Idle: USB + Battery Power              --                       --                       90.5 \u00b5A 721 \u00b5A (peak)              N/A                       Idle: Battery Charging (Current from USB-C)              395 mA 420 mA (peak)              590 mA 600 mA (peak)              &gt; 110 mA (before shutdown)              N/A          RGB (White @ 100%)              78.4 mA 105.9 mA (peak)              79 mA 106.8 mA (peak)              79.9 mA 105.3 mA (peak)              82.5 mA 108.2 mA (peak)              WiFi Example (Transceiving)              135 mA 295 mA (peak)              137 mA 310 mA (peak)              137 mA 307 mA (peak)              140 mA 300 mA (peak) Deep Sleep Example (MCU Inactive)              2.5 mA 2.95 mA (peak)              2.5 mA 3 mA (peak)              2.55 mA 3 mA (peak)              2.85 mA 3.3 mA (peak) Deep Sleep Example (MCU Inactive + Jumpers Cut)              842 \u00b5A 1.24 mA (peak)              848 \u00b5A 1.23 mA (peak)              866 \u00b5A 1.24 mA (peak)              1.19 mA 1.58 mA (peak) <p>It is possible for users to reach sub-mA power consumption levels with the deep sleep power modes. Using the <code>TimerWakeUp</code> Deep Sleep example code, the LED jumpers cut, and powering the board through the LiPo battery connection we measured a power consumption of 845 \u00b5A (990 \u00b5A peak) @ 3.7V while the MCU was inactive.</p> <p> The current measurement from <code>VBAT</code> at 3.7V during deep sleep. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#esp32-wroom","title":"ESP32-WROOM","text":"<p>This variant of the ESP32 Thing Plus is designed around the ESP32-WROOM module with 16MB of flash memory. Espressif's ESP32-WROOM module is a versitile, WiFi+BT+BLE MCU module that targets a wide variety of applications. At the core of this module is the ESP32-D0WDQ6 system on a chip (SoC) which is designed to be both scalable and adaptive. Its laundry list of features include:</p> <ul> <li>Xtensa\u00ae Dual-Core 32-bit LX6 Microprocessor (up to 240MHz)</li> <ul> <li>448KB ROM and 520KB SRAM</li> <li>16MB of Embedded SPI Flash Storage</li> </ul> <li>Cryptographic Hardware Accelerators</li> <ul> <li>AES, SHA2, ECC, RSA-4096</li> </ul> <li>Integrated 802.11 b/g/n WiFi 2.4GHz Transceiver (up to 150Mbps)</li> <li>Integrated dual-mode Bluetooth (Bluetooth v4.2 and BLE) </li> <li>26 GPIO (including strapping pins)</li> <ul> <li>8x Capacitive Touch Electrodes</li> </ul> <li>Operating Voltage: 3.0 to 3.6V</li> <ul> <li>WiFi: 380mA (peak)</li> <li>Light-Sleep: 800\u00b5A</li> <li>Deep-Sleep: 10 - 150\u00b5A</li> </ul> </ul> ESP32-WROOM module on the ESP32 Thing Plus (USB-C).             (Click to enlarge) <p>Warning</p> <p><p>Users should be aware of the following nuances and details of this board</p> <ul> <li>The ESP32-WROOM is only compatible with 2.4GHz WiFi networks; it will not work on the 5GHz bands.</li> <li>For details on the boot mode configuration, please refer to section 3.3 Strapping Pins of the ESP32-WROOM module datasheet.</li> </ul></p> <p>Note</p> <p><p>The ESP32-WROOM module has various power modes:</p> <ul> <li>Active -  The chip radio is powered on. The chip can receive, transmit, or listen.</li> <li>Modem Sleep - The CPU is operational and the clock is configurable. The Wi-Fi/Bluetooth baseband and radio are disabled.</li> <li>Light Sleep - The CPU is paused. The RTC memory and RTC peripherals, as well as the ULP coprocessor are running.</li> <li>Deep Sleep - Only the RTC memory and RTC peripherals are powered on. The ULP coprocessor is functional.     <li>Hibernation - Only one RTC timer on the slow clock and certain RTC GPIOs are active.</li> <li>Off - Chip is powered off</li> <p><p>For more information on the power management of the ESP32-WROOM module, pleaser refer to Section 3.7 and Tables: 8 and 17 of the ESP32 SoC Datasheet.</p></p>"},{"location":"hardware_overview-tabs_version/#debugging","title":"Debugging","text":"<p>For users interested in debugging their code, the JTAG pins are broken out on the board. However, the debugging feature is only available through the ESP-IDF.</p> <ul> <li><code>TMS</code>: <code>GPIO 14</code></li> <li><code>TDI</code>: <code>GPIO 12</code></li> <li><code>TCK</code>: <code>GPIO 13</code></li> <li><code>TDO</code>: <code>GPIO 15</code></li> </ul> <p>Note</p> <p>Users should be aware that <code>GPIO 13</code> is connected to the <code>STAT</code> LED with a pull down resistor.</p>"},{"location":"hardware_overview-tabs_version/#firmware-download-mode","title":"Firmware Download Mode","text":"<p>Users can manually force the board into the serial bootloader with the BOOT button. Please, refer to the Boot Button section below for more information.</p>"},{"location":"hardware_overview-tabs_version/#peripherals-and-io","title":"Peripherals and I/O","text":"<p>Warning</p> <p><p>Note: Users should be aware of the following nuances of this board <ul> <li>\u26a1 All the GPIO on the ESP32-WROOM Thing Plus are 3.3V pins.         <ul> <li>The I/O pins are not 5V-tolerant! To interface with higher voltage components, a logic level adapter is recommended.</li> </ul> </li> <li>\u26a1  There are electrical limitations to the amount of current that the ESP32-WROOM module can sink or source. For more details, check out the ESP32-WROOM module datasheet.</li> <li>There are some limitations to the ADC performance, see the Note from the ADC Characteristics section of the ESP32 SoC datasheet.  <p>The ESP32-WROOM module has 26 multifunctional GPIO, of which, 21 I/O pins broken out into a feather form factor layout on this board. All of the ESP32-WROOM Thing Plus (USB-C) pins have a .1\" pitch spacing for headers. With the pin multiplexing capabilities of the ESP32 SoC, various pins can have several functionalities. For more technical specifications on the I/O pins, please refer to the ESP32 SoC datasheet.</p> <ul> <li>13x 12-bit analog to digital converter (ADC) channels</li> <li>3x UARTs (only two are configured by default in the Arduino IDE, one UART is used for bootloading/debug)</li> <li>3x SPI (only one is configured by default in the Arduino IDE)</li> <li>2x I<sup>2</sup>C (only one is configured by default in the Arduino IDE)</li> <li>2x I<sup>2</sup>S Audio</li> <li>2x digital-to-analog converter (DAC) channels</li> <li>16x 20-bit PWM outputs</li> <li>8x Capacitive Touch Inputs</li> </ul> <p> Graphical datasheet for the ESP32-WROOM Thing Plus (USB-C). (Click to enlarge) </p> <p>Note</p> <p>Users should be aware of the following limitations for the board in the Arduino IDE. <ul> <li>Not all of the features, listed above, are available in the Arduino IDE. For the full capabilities of the ESP32, the Espressif IDF should be utilized.</li> <li>Only one I<sup>2</sup>C bus is defined.</li> <li>Only two UART interfaces are available.</li> <ul> <li>UART (USB): <code>Serial</code></li> <li><code>RX</code>/<code>TX</code> Pins: <code>Serial1</code></li> </ul> <li>Only one SPI bus is defined.</li> </ul></p> <p>For digital pins, users will need to declare the <code>pinMode()</code> (link) in the setup of their sketch (programs written in the Arduino IDE) for the pins used.</p>"},{"location":"hardware_overview-tabs_version/#input","title":"Input","text":"<p>When configured properly, an input pin will be looking for a HIGH or LOW state. Input pins are High Impedance and takes very little current to move the input pin from one state to another.</p>"},{"location":"hardware_overview-tabs_version/#output","title":"Output","text":"<p>When configured as an output the pin will be at a HIGH or LOW voltage. Output pins are Low Impedance: This means that they can provide a relatively substantial amount of current to other circuits.</p> <p>Warning</p> <p>\u26a1 There are electrical limitations to the amount of current that the ESP32-WROOM module can sink or source. For more details, check out the ESP32-WROOM module datasheet.</p>"},{"location":"hardware_overview-tabs_version/#additional-functions","title":"Additional Functions","text":"<p>There are several pins that have special functionality in addition to general digital I/O. These pins and their additional functions are listed in the tabs below. For more technical specifications on the I/O pins, you can refer to the schematic, ESP32-WROOM module datasheet, ESP32 SoC datasheet, and documentation for the ESP32 Arduino core.</p> <ul> <li>              Analog Input</li> <li>              PWM/Analog Output</li> <li>              Serial Comm.</li> <li>              SPI</li> <li>              I<sup>2</sup>C</li> </ul> Analog Input Pins <p>The ESP32-WROOM module provides a 12-bit ADC input on thirteen of its I/O pins. This functionality is accessed in the Arduino IDE using the <code>analogRead(pin)</code> function. (*The available ADC pins are highlighted in the image below.)</p> <p> Analog input pins on the ESP32-WROOM Thing Plus. (Click to enlarge) Note: By default, in the Arduino IDE, <code>analogRead()</code> returns a 10-bit value. To change the resolution of the value returned by the <code>analogRead()</code> function, use the <code>analogReadResolution(bits)</code> function.          <p>Note: To learn more about analog vs. digital signals, check out this great tutorial.</p> </p> Pulse Width Modulation (PWM) and Analog (DAC) Output Pins <p>The ESP32-WROOM module supports up to sixteen channels of 20-bit PWM outputs on any of its I/O pins. This is accessed in the Arduino IDE using the <code>analogWrite(pin, value)</code> function or the LED Control API. (*Any I/O pin can be used for the PWM outputs; the available DAC pins, with true analog outputs, are highlighted in the image below.)</p> <p> Any I/O pin can be used for a PWM output, but these are the DAC pins on the ESP32-WROOM Thing Plus. (Click to enlarge) <p>Note: By default, in the Arduino IDE, <code>analogWrite()</code> accepts an 8-bit value. To change the resolution of the PWM signal for the <code>analogWrite()</code> function, use the <code>analogWriteResolution(bits)</code> function.</p> <p>(*The PWM output is not a true analog signal. For a true analog output, please refer to the DAC API for <code>GPIO 25</code> and <code>GPIO 26</code>.)</p> <p>Note: To learn more about pulse width modulation (PWM), check out this great tutorial.</p> </p> Serial Communication Pins <p>The ESP32-WROOM module provides three UART ports. By default, the UART port for the USB connection (<code>Serial</code>) and the labeled UART I/O pins on the board (<code>Serial1</code>) can be accessed through the Arduino IDE using the serial communication class.</p> <p> Default UART ports on the ESP32-WROOM Thing Plus. (Click to enlarge) Note: By default, in the Arduino IDE, the SparkFun ESP32 Thing Plus C board definition supports:                 <ul> <li><code>Serial</code> - UART (USB)</li> <li><code>Serial1</code> - Pins: <code>RX</code>/<code>TX</code> (<code>GPIO 16</code>/<code>GPIO 17</code>)</li> </ul>         In order to utilize the serial communication on the strapping pins, users will need to create a custom serial port object and declare which pins to access. <p>Note: To learn more about serial communication, check out this great tutorial.</p> </p> <p>Note: We have noticed that with the ESP32 Arduino core, <code>Serial.available()</code> does not operate instantaneously. This is due to an interrupt triggered by the UART, to empty the FIFO when the <code>RX</code> pin is inactive for two byte periods:         <ul> <li>At 9600 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> + 2] x 1 ms = 11 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> <li>At 115200 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> + 2] x .087 ms = ~1 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> </ul> </p> <p>For more information, please refer to this  chatroom discussion.</p> SPI Communication <p>The ESP32-WROOM module provides three SPI buses. By default, in the Arduino IDE, the SPI class is configured to utilize pins <code>GPIO 18</code> (SCK), <code>GPIO 19</code> (POCI), <code>GPIO 23</code> (PICO). These pins share the same SPI bus as the \u00b5SD card slot, which utilizes pin <code>5</code> (<code>SS</code>) for its chip select. In order to utilize the other SPI ports or objects, users will need to create a custom SPI object and declare which pins to access.</p> Note: To comply with the latest OSHW design practices, we have adopted the new SPI signal nomenclature (SDO/SDI and PICO/POCI). The terms Master and Slave are now referred to as Controller and Peripheral. The <code>MOSI</code> signal on a controller has been replaced with <code>SDO</code> or <code>PICO</code>. Please refer to this announcement on the decision to deprecate the MOSI/MISO terminology and transition to the SDO/SDI naming convention. <p> Default SPI bus connections on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> SCK <code>GPIO 18</code> (<code>SCK</code>) SDI or POCI <code>GPIO 19</code> (<code>MISO</code>) SDO or PICO <code>GPIO 23</code> (<code>MOSI</code>) CS (\u00b5SD Card) <code>GPIO 5</code> (<code>SS</code>) <p>Note: To learn more about the serial peripheral interface (SPI) protocol, check out this great tutorial.</p> I<sup>2</sup>C Communication Pins <p>The ESP32-WROOM module module can support up to two I<sup>2</sup>C buses. By default, in the Arduino IDE, the Wire class is configured to utilize pins <code>GPIO 21</code> (SDA) and <code>GPIO 22</code> (SCL). These pins share the same I<sup>2</sup>C bus with the Qwiic connector and MAX17048 fuel gauge. In order to utilize the other  I<sup>2</sup>C ports, users will need to create a custom Wire object and declare which pins to access.</p> <p> Default I<sup>2</sup>C bus connections for the ESP32-WROOM Thing Plus. (Click to enlarge) </p> SCL <code>GPIO 22</code> (<code>SCL</code>) SDA <code>GPIO 21</code> (<code>SDA</code>) <p>Note: To learn more about the inter-integrated circuit (I<sup>2</sup>C) protocol, check out this great tutorial.</p>"},{"location":"hardware_overview-tabs_version/#buttons","title":"Buttons","text":"<p>There are two buttons on ESP32-WROOM Thing Plus; a RST and BOOT button.</p>"},{"location":"hardware_overview-tabs_version/#reset-button","title":"Reset Button","text":"<p>The RST (reset) button allows users to reset the program running on the ESP32-WROOM module without unplugging the board.</p> <p> RST button on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#boot-button","title":"Boot Button","text":"<p>The BOOT button can be used to force the board into the serial bootloader. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause it to enter the Firmware Download mode. The board will remain in this mode until it power cycles (happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer with through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board. </li> </ul> </li> </ol> <p> BOOT button on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Warning</p> <p>\u26a1 The BOOT button is also connected to <code>GPIO 0</code>, which controls the voltage output to the Qwiic connector. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"hardware_overview-tabs_version/#indicator-leds","title":"Indicator LEDs","text":"<p>There are four indicator LEDs on the ESP32-WROOM Thing Plus:</p> <ul> <li><code>PWR</code>: Power (Red)</li> <li><code>CHG</code>: Battery Charging (Yellow)</li> <li><code>13</code>: <code>GPIO 13</code> (Blue)</li> <li><code>WS2812</code>: <code>GPIO 02</code> (RGB)</li> </ul>"},{"location":"hardware_overview-tabs_version/#power-led","title":"Power LED","text":"<p>The red, power (<code>PWR</code>) LED will light up once 3.3V is supplied to the board. For most users, it will light up when 5V is supplied through the USB connection and/or when a LiPo battery is attached to the JST connector. </p> <p> ESP32-WROOM Thing Plus <code>PWR</code> status LED indicator. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#battery-charging-led","title":"Battery Charging LED","text":"<p>The yellow, battery charging (<code>CHG</code>) LED indicates the status of the MCP73831 charge management controller. The LED will shut off when no battery is present, when the charge management controller is in standby (after the battery charging has been completed), or when the charge management controller is shutdown. The LED will illuminate when the charge management controller is in the process of charging the battery. For more information, please refer to the MCP73831 datasheet.</p> The battery charging (<code>CHG</code>) LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) Charge Cycle State LED                          Shutdown                         <ul> <li>Thermal Shutdown</li> <li>V<sub>DD</sub> &lt; V<sub>BAT</sub></li> </ul> Off (High Z) No Battery Present Off (High Z) Charge Complete \u2013 Standby Off (H) Preconditioning On (L) Constant-Current Fast Charge On (L) Constant Voltage On (L)"},{"location":"hardware_overview-tabs_version/#stat-led","title":"STAT LED","text":"<p>The blue, status (<code>STAT</code>) LED is typically used as a test or status LED to make sure that a board is working or for basic debugging. This indicator is connected to <code>GPIO 13</code>.</p> <p> The status (<code>STAT</code>) LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#ws2812-rgb-led","title":"WS2812 RGB LED","text":"<p>The WS2812 RGB LED is controlled with a 24-bit (GRB) data signal. This indicator is connected to <code>GPIO 02</code> and the digital output pin from the LED is available through a test point. For more information, please refer to the WS2812C datasheet.</p> <p> <code>WS2812</code> LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Note</p> <p>The latest ESP32 Arduino core, now provides a basic RGB LED driver for a WS2812 (or NeoPixel) LED populated the board. For an example of how to utilize the RGB LED driver check out the BlinkRGB example code, which can be accessed from the File drop down menu (i.e File &gt; Examples &gt; ESP32 &gt; GPIO &gt; BlinkRGB).</p>"},{"location":"hardware_overview-tabs_version/#sd-slot","title":"\u00b5SD Slot","text":"<p>Note</p> <p>To comply with the latest OSHW design practices, we have adopted the new SPI signal nomenclature (SDO/SDI and PICO/POCI). The terms Master and Slave are now referred to as Controller and Peripheral. Please refer to this announcement on the decision to transition to the new naming convention.</p> <p>The ESP32-WROOM Thing Plus (USB-C) includes an \u00b5SD card slot. This is great for data logging applications or storing files. The \u00b5SD card slot is connected to the following dedicated GPIO:</p> <ul> <li><code>GPIO 5</code>: <code>DATA 3</code>/<code>CS</code></li> <li><code>N/A</code>: <code>DATA 2</code></li> <li><code>N/A</code>: <code>DATA 1</code></li> <li><code>GPIO 19</code>: <code>DATA 0</code>/<code>POCI</code> (or Peripheral's <code>SDO</code>)</li> <li><code>GPIO 18</code>: <code>CLK</code>/<code>SCK</code></li> <li><code>GPIO 23</code>: <code>CMD</code>/<code>PICO</code> (or Peripheral's <code>SDI</code>)</li> </ul> <p> \u00b5SD card slot on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#jumpers","title":"Jumpers","text":"<p>There are two jumpers on the back of the board that can be used to easily modify the hardware connections on the board.</p> <ul> <li>SHLD - This jumper can be used to disconnect the USB shield from <code>GND</code>.</li> <li>PWR - This jumper can be used to remove power to the <code>PWR</code> LED. </li> <li>CHG LED - This jumper can be used to remove power to the <code>CHG</code> LED.<ul> <li>Avoid cutting the box's silkscreen; there are traces under it:  Traces around the <code>CHG LED</code> jumper. (Click to enlarge) </li> </ul> </li> </ul> <p>Note</p> <p><p>Never modified a jumper before? Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <p> How to Work with Jumper Pads and PCB Traces </p></p> <p> The jumpers on the back of the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#primary-i2c-bus","title":"Primary I<sup>2</sup>C Bus","text":"<p>The Qwiic connector and battery fuel gauge are attached to the primary I<sup>2</sup>C bus. The primary I<sup>2</sup>C bus for this board utilizes the pin connections, detailed in the table below:</p> <p>                  Connection              <code>VDD</code> <code>GND</code> <code>SCL</code> <code>SDA</code>                  Battery Fuel Gauge (MAX17048) <code>VBAT</code> GND <code>GPIO 22</code> <code>GPIO 21</code>                  Qwiic Connector              <code>GPIO 0</code> (Enables 3.3V) GND <code>GPIO 22</code> <code>GPIO 21</code> </p>"},{"location":"hardware_overview-tabs_version/#battery-fuel-gauge","title":"Battery Fuel Gauge","text":"<p>The MAX17048 fuel gauge measures the approximate charge or discharge rate, state of charge (SOC) (based on ModelGauge algorithm), and voltage of a connected battery. Additionally, the chip is powered directly from <code>VBAT</code>, when a LiPo battery is connected. For more information, please refer to the MAX17048 datasheet.</p> The MAX17048 fuel gauge on the ESP32-WROOM Thing Plus. (Click to enlarge) I<sup>2</sup>C Address 0x36 (7-bit) 0x6C (write)/0x6D (read)                      Voltage Measurement                          Range: 2.5 - 5 V                         Precision: \u00b17.5 mV/Cell                         Resolution 1.25 mV/Cell                      Current Consumption                          Sleep: .5 - 2 \u00b5A                         Hibernate: 3 - 5 \u00b5A                         Active: 23 - 40 \u00b5A                      <p>Note</p> <p>The <code>Alert</code> pin for the MAX17048 is not connected and cannot be utilized.</p>"},{"location":"hardware_overview-tabs_version/#qwiic-connector","title":"Qwiic Connector","text":"<p>A Qwiic connector is provided for users to seamlessly integrate with SparkFun's Qwiic Ecosystem.</p> <p> Qwiic connector and I<sup>2</sup>C pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview-tabs_version/#power-control_1","title":"Power ControlFeatures of the Qwiic SystemKeep your soldering iron at bay.Minimize your mistakes.Expand with ease.","text":"<p>In order to enable power for the Qwiic connector, users must toggle <code>GPIO 0</code> high. This enables the power output from the XC6222 LDO regulator to the Qwiic connector, which can sources up to 700mA at 3.3V . In order to conserve battery power or in low power applications, users will can toggle <code>GPIO 0</code> low, to disable the power to the Qwiic connector.</p> <p>Warning</p> <p>\u26a1 <code>GPIO 0</code> is also connected to the BOOT button. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p> <p>What is Qwiic?</p> <p>The Qwiic system is intended a quick, hassle-free cabling/connector system for I<sup>2</sup>C devices. Qwiic is actually a play on words between \"quick\" and I<sup>2</sup>C or \"iic\".  </p> <ul> <li>              No Soldering</li> <li>              Polarized Connector</li> <li>              Daisy Chain</li> </ul> <p>Cables plug easily between boards making quick work of setting up a new prototype. We currently offer three different lengths of Qwiic cables as well as a breadboard friendly cable to connect any Qwiic enabled board to anything else. Initially you may need to solder headers onto the shield to connect your platform to the Qwiic system but once that\u2019s done it\u2019s plug and go!</p> <p>Qwiic cables connected to Spectral Sensor Breakout</p> <p>How many times have you swapped the SDA and SCL wires on your breadboard hoping the sensor will start working? The Qwiic connector is polarized so you know you\u2019ll have it wired correctly, every time, from the start.</p> <p>The PCB connector is part number SM04B-SRSS (Datasheet) or equivalent. The mating connector used on cables is part number SHR04V-S-B or equivalent. This is a common and low cost connector.</p> <p>1mm pitch, 4-pin JST connector</p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them allowing multiple devices to be connected.</p> <p>Shown above: Qwiic Shield for Arduino on RedBoard, Spectral Sensor Breakout - NIR, Spectral Sensor Breakout - Visible and SparkFun GPS Breakout </p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Note</p> <p>              All mentions of <code>GPIO</code> in this section will refer to the I/O pins of the ESP32-WROOM module as represented in the datasheets and pin numbers of the board definition in the ESP32 Arduino core. They do not correspond with the net names for the ThingPlus Form Factor device in the schematic. (The device in the schematic is primarily, used internally to facilitate the board design process; just ignore the naming of the <code>GPIO0</code> - <code>GPIO6</code> nets.) (Click to enlarge) </p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below. The listed measurements are in inches and the two mounting holes are compatible with 4-40 standoff screws.</p> <p> Board dimensions (PDF) for the ESP32-WROOM Thing Plus, in inches. (Click to enlarge) </p>"},{"location":"hardware_overview/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB connector is provided to power and program the board. For most users, it will be the primary programing interface for the ESP32.</p> <p> USB-C connector on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#ch340-serial-to-uart","title":"CH340 Serial-to-UART","text":"<p>The CH340 allows the ESP32-WROOM to communicate with a computer/host device through the board's USB-C connection. This allows the board to show up as a device on the serial (or COM) port of the computer. Users will need to install the latest drivers for the computer to recognize the board (see Software Overview section).</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The ESP32-WROOM Thing Plus only requires 3.3V to power the board. However, the simplest method to power the board is through the USB-C connector. Alternatively, the <code>3V3</code>, <code>VBAT</code>, and <code>VUSB</code> pins can also be used to supply power to the board.</p> <ul> <li><code>VUSB</code>:<ul> <li>The maximum voltage for the LDOs and charge controller is 6V.</li> <li>The minimum voltage for the charge controller is 3.75V.</li> </ul> </li> <li><code>VBAT</code>:<ul> <li>Should not be connected to anything other than a single-cell LiPo battery.</li> </ul> </li> <li><code>3V3</code>:<ul> <li>Requires a regulated 3.3V.</li> <li>Only powers the board and not the Qwiic connector.</li> </ul> </li> </ul> <p> ESP32-WROOM Thing Plus power connections. (Click to enlarge) </p> <p>Below, is a general summary of the power circuitry on the board:</p> <ul> <li><code>3V3</code> - Provides a regulated 3.3V from the USB (5V) power and/or battery connections.<ul> <li>Used to power the ESP32-WROOM module, \u00b5SD card slot, WS2812 RGB LED, CH340C Serial-to-UART bridge, and power LED.<ul> <li>The Qwiic connector is powered by its own voltage regulator, from the same power source(s).</li> </ul> </li> <li>The 3.3V XC6222 LDO regulator can source up to 700mA.<ul> <li>Output is controlled by the <code>EN</code> pin on the board.</li> </ul> </li> </ul> </li> <li><code>VUSB</code> - The voltage from the USB-C connector, usually 5V.<ul> <li>Power source for the entire board.<ul> <li>Powers the 3.3V voltage regulators and the battery charging circuit for <code>VBAT</code>.</li> </ul> </li> <li>Overides power from the battery through a P-channel MOSFET, when both are connected.</li> <li>Utilizes a BAT20J protection diode for the USB-C connection.</li> </ul> </li> <li><code>VBAT</code> - The voltage from the JST battery connector; meant for single cell LiPo batteries.<ul> <li>Provides power to the 3.3V voltage regulators and MAX17048 battery fuel gauge.</li> <li>The MCP73831 linear charge management controller is powered from the USB (5V) power supply.<ul> <li>The charge controller is configured for 500mA (max) rate of charge to a connected battery.</li> </ul> </li> </ul> </li> <li><code>GND</code> - The common ground or the 0V reference for the voltage supplies.</li> <li>Qwiic Connector - Provides a regulated 3.3V voltage from the USB (5V) power and/or battery connections.<ul> <li>Operates independently from the <code>3V3</code> pin, with its own voltage regulator.</li> <li>The 3.3V XC6222 LDO regulator can source up to 700mA.<ul> <li>Output is controlled by <code>GPIO 0</code> of the ESP32-WROOM.</li> </ul> </li> </ul> </li> </ul> <p>For more details, users can reference the schematic and the datasheets of the individual components in the power circuitry.</p>"},{"location":"hardware_overview/#power-status-led","title":"Power Status LED","text":"<p>The red, <code>PWR</code> LED will light up once 3.3V is supplied to the board; however, for most users, it will light up when 5V is supplied through the USB connection or when a LiPo battery is connected to the JST connector.</p> <p> ESP32-WROOM Thing Plus <code>PWR</code> status LED indicator. (Click to enlarge) </p>"},{"location":"hardware_overview/#charging-circuit","title":"Charging Circuit","text":"<p>The charging circuit utilizes the MCP73831 linear charge management controller and is powered directly from the USB-C connector or <code>VUSB</code>. The controller is configured for a 500mA charge rate and active charging is indicated by the yellow, <code>CHG</code> LED. If the charge controller is shutdown or charging is complete, the <code>CHG</code> LED will turn off. For more information, please refer to the MCP73831 datasheet and the Indicator LEDs section below.</p>"},{"location":"hardware_overview/#power-control","title":"Power Control","text":"<p>The power source for the XC6222 LDO voltage regulators is controlled by a P-channel MOSFET. In addition, the 3.3V regulated output from the XC6222 LDOs are enabled by the control pin (<code>CE</code>).</p> <p> Circuits for the 3.3V power on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>The P-channel MOSFET operates based on the voltages at the MOSFET's gate and source pins. Depending on the power supplies connected to the board, the MOSFET will switch between the battery and USB-C connection as power sources for the XC6222 voltage regulators.</p>              Power             Source          MOSFET Power Control Description Gate Source              V<sub>GS</sub>             (V<sub>Gate</sub> - V<sub>Source</sub>)              MOSFET             Operation          USB Only V<sub>USB</sub> = 5V V<sub>USB</sub> - V<sub>f</sub>              V<sub>USB</sub> - (V<sub>USB</sub> - V<sub>f</sub>)             V<sub>GS</sub> = V<sub>f</sub>              MOSFET Off             R<sub>GS</sub> = \u221e             Switch Open          Power to the XC6222 is supplied by the USC-C connection.             Power from the USB-C connection is passed through the Schottky diode. Due to the voltage drop from the Schottky diode, the gate threshold voltage for the MOSFET is positive and equivalent to the diode's forward voltage (V<sub>f</sub>).Therefore, the MOSFET behaves as an open switch.          Battery Only V<sub>USB</sub> = 0V Dep. Mode:             V<sub>Source</sub> = 0 Charged Cap.:             V<sub>Batt</sub> = 3 - 4.2V          Dep. Mode:             V<sub>GS</sub> = 0 Charged Cap.:             V<sub>USB</sub> - V<sub>Batt</sub> = -V<sub>Batt</sub>             -3V &gt; V<sub>GS</sub> &gt; -4.2V                       MOSFET On             R<sub>GS</sub> = Low             Switch Closed          Power to the XC6222 is supplied from the battery connection.             As a depletion type P-channel MOSFET, the mosfet acts as a normally closed switch when the gate threshold voltage is zero. Therefore, power from the battery is able to charge the capacitor and create a negative gate threshold voltage. The MOSFET remains behaving as a closed switch and power to the XC6222 is provided from the battery.          USB &amp; Battery V<sub>USB</sub> = 5V V<sub>USB</sub> - V<sub>f</sub> V<sub>GS</sub> = V<sub>f</sub>              MOSFET Off             R<sub>GS</sub> = \u221e             Switch Open          Power to the XC6222 is supplied by the USC-C connection.             Power from the USB-C connection is passed through the Schottky diode. Due to the voltage drop from the Schottky diode, the gate threshold voltage for the MOSFET is positive and equivalent to the diode's forward voltage (V<sub>f</sub>).Therefore, the MOSFET behaves as an open switch.          <p>The control pin (<code>CE</code>) of the XC6222 LDOs also provides an additional amount of control for the board's power. By default, the regulated 3.3V output is enabled. To disable and shutdown the output voltage from the XC6222, the control pin needs to be pulled low (i.e. shorted to ground (<code>GND</code>)). For more information, please refer to the XC6222 datasheet.</p> <ul> <li>The 3.3V power for the board (<code>3V3</code>) is controlled by the <code>EN</code> pin, which is broken out on the board.</li> <li>The 3.3V power for the Qwiic connector is controlled by <code>GPIO 0</code> of the ESP32-WROOM.</li> </ul> <p> XC6222 control pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Warning</p> <p>\u26a1 Note: The BOOT button is also connected to <code>GPIO 0</code>. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"hardware_overview/#current-consumption","title":"Current Consumption","text":"<p>According to the specifications, the ESP32-WROOM draws about 240 mA during RF transmissions. With the WiFi example in this tutorial, have measured it to average around 140 mA and peak at 300 mA while actively transceiving. The table below, summarizes the approximate current draw of the ESP32-WROOM Thing Plus (USB-C) for various operational conditions. The measurements in the table below, were made with the Nordic Power Profiler Kit II.</p> Operation Avg. Current Draw              LiPo: 3.5V (Low &lt; 5%)              LiPo: 3.7V (~15%)              LiPo: 4.2V (~100%)              USB-C: 5V (No Battery) Idle (Blank Code)              63 mA 86 mA (peak)              63.5 mA 89 mA (peak)              64 mA 88.6 mA (peak)              67 mA 89.9 mA (peak) Idle: USB + Battery Power              --                       --                       90.5 \u00b5A 721 \u00b5A (peak)              N/A                       Idle: Battery Charging (Current from USB-C)              395 mA 420 mA (peak)              590 mA 600 mA (peak)              &gt; 110 mA (before shutdown)              N/A          RGB (White @ 100%)              78.4 mA 105.9 mA (peak)              79 mA 106.8 mA (peak)              79.9 mA 105.3 mA (peak)              82.5 mA 108.2 mA (peak)              WiFi Example (Transceiving)              135 mA 295 mA (peak)              137 mA 310 mA (peak)              137 mA 307 mA (peak)              140 mA 300 mA (peak) Deep Sleep Example (MCU Inactive)              2.5 mA 2.95 mA (peak)              2.5 mA 3 mA (peak)              2.55 mA 3 mA (peak)              2.85 mA 3.3 mA (peak) Deep Sleep Example (MCU Inactive + Jumpers Cut)              842 \u00b5A 1.24 mA (peak)              848 \u00b5A 1.23 mA (peak)              866 \u00b5A 1.24 mA (peak)              1.19 mA 1.58 mA (peak) <p>It is possible for users to reach sub-mA power consumption levels with the deep sleep power modes. Using the <code>TimerWakeUp</code> Deep Sleep example code, the LED jumpers cut, and powering the board through the LiPo battery connection we measured a power consumption of 845 \u00b5A (990 \u00b5A peak) @ 3.7V while the MCU was inactive.</p> <p> The current measurement from <code>VBAT</code> at 3.7V during deep sleep. (Click to enlarge) </p>"},{"location":"hardware_overview/#esp32-wroom","title":"ESP32-WROOM","text":"<p>This variant of the ESP32 Thing Plus is designed around the ESP32-WROOM module with 16MB of flash memory. Espressif's ESP32-WROOM module is a versitile, WiFi+BT+BLE MCU module that targets a wide variety of applications. At the core of this module is the ESP32-D0WDQ6 system on a chip (SoC) which is designed to be both scalable and adaptive. Its laundry list of features include:</p> <ul> <li>Xtensa\u00ae Dual-Core 32-bit LX6 Microprocessor (up to 240MHz)</li> <ul> <li>448KB ROM and 520KB SRAM</li> <li>16MB of Embedded SPI Flash Storage</li> </ul> <li>Cryptographic Hardware Accelerators</li> <ul> <li>AES, SHA2, ECC, RSA-4096</li> </ul> <li>Integrated 802.11 b/g/n WiFi 2.4GHz Transceiver (up to 150Mbps)</li> <li>Integrated dual-mode Bluetooth (Bluetooth v4.2 and BLE) </li> <li>26 GPIO (including strapping pins)</li> <ul> <li>8x Capacitive Touch Electrodes</li> </ul> <li>Operating Voltage: 3.0 to 3.6V</li> <ul> <li>WiFi: 380mA (peak)</li> <li>Light-Sleep: 800\u00b5A</li> <li>Deep-Sleep: 10 - 150\u00b5A</li> </ul> </ul> ESP32-WROOM module on the ESP32 Thing Plus (USB-C).             (Click to enlarge) <p>Warning</p> <p><p>Users should be aware of the following nuances and details of this board</p> <ul> <li>The ESP32-WROOM is only compatible with 2.4GHz WiFi networks; it will not work on the 5GHz bands.</li> <li>For details on the boot mode configuration, please refer to section 3.3 Strapping Pins of the ESP32-WROOM module datasheet.</li> </ul></p> <p>Note</p> <p><p>The ESP32-WROOM module has various power modes:</p> <ul> <li>Active -  The chip radio is powered on. The chip can receive, transmit, or listen.</li> <li>Modem Sleep - The CPU is operational and the clock is configurable. The Wi-Fi/Bluetooth baseband and radio are disabled.</li> <li>Light Sleep - The CPU is paused. The RTC memory and RTC peripherals, as well as the ULP coprocessor are running.</li> <li>Deep Sleep - Only the RTC memory and RTC peripherals are powered on. The ULP coprocessor is functional.     <li>Hibernation - Only one RTC timer on the slow clock and certain RTC GPIOs are active.</li> <li>Off - Chip is powered off</li> <p><p>For more information on the power management of the ESP32-WROOM module, pleaser refer to Section 3.7 and Tables: 8 and 17 of the ESP32 SoC Datasheet.</p></p>"},{"location":"hardware_overview/#debugging","title":"Debugging","text":"<p>For users interested in debugging their code, the JTAG pins are broken out on the board. However, the debugging feature is only available through the ESP-IDF.</p> <ul> <li><code>TMS</code>: <code>GPIO 14</code></li> <li><code>TDI</code>: <code>GPIO 12</code></li> <li><code>TCK</code>: <code>GPIO 13</code></li> <li><code>TDO</code>: <code>GPIO 15</code></li> </ul> <p>Note</p> <p>Users should be aware that <code>GPIO 13</code> is connected to the <code>STAT</code> LED with a pull down resistor.</p>"},{"location":"hardware_overview/#firmware-download-mode","title":"Firmware Download Mode","text":"<p>Users can manually force the board into the serial bootloader with the BOOT button. Please, refer to the Boot Button section below for more information.</p>"},{"location":"hardware_overview/#peripherals-and-io","title":"Peripherals and I/O","text":"<p>Warning</p> <p><p>Note: Users should be aware of the following nuances of this board <ul> <li>\u26a1 All the GPIO on the ESP32-WROOM Thing Plus are 3.3V pins.         <ul> <li>The I/O pins are not 5V-tolerant! To interface with higher voltage components, a logic level adapter is recommended.</li> </ul> </li> <li>\u26a1  There are electrical limitations to the amount of current that the ESP32-WROOM module can sink or source. For more details, check out the ESP32-WROOM module datasheet.</li> <li>There are some limitations to the ADC performance, see the Note from the ADC Characteristics section of the ESP32 SoC datasheet.  <p>The ESP32-WROOM module has 26 multifunctional GPIO, of which, 21 I/O pins broken out into a feather form factor layout on this board. All of the ESP32-WROOM Thing Plus (USB-C) pins have a .1\" pitch spacing for headers. With the pin multiplexing capabilities of the ESP32 SoC, various pins can have several functionalities. For more technical specifications on the I/O pins, please refer to the ESP32 SoC datasheet.</p> <ul> <li>13x 12-bit analog to digital converter (ADC) channels</li> <li>3x UARTs (only two are configured by default in the Arduino IDE, one UART is used for bootloading/debug)</li> <li>3x SPI (only one is configured by default in the Arduino IDE)</li> <li>2x I<sup>2</sup>C (only one is configured by default in the Arduino IDE)</li> <li>2x I<sup>2</sup>S Audio</li> <li>2x digital-to-analog converter (DAC) channels</li> <li>16x 20-bit PWM outputs</li> <li>8x Capacitive Touch Inputs</li> </ul> <p> Graphical datasheet for the ESP32-WROOM Thing Plus (USB-C). (Click to enlarge) </p> <p>Note</p> <p>Users should be aware of the following limitations for the board in the Arduino IDE. <ul> <li>Not all of the features, listed above, are available in the Arduino IDE. For the full capabilities of the ESP32, the Espressif IDF should be utilized.</li> <li>Only one I<sup>2</sup>C bus is defined.</li> <li>Only two UART interfaces are available.</li> <ul> <li>UART (USB): <code>Serial</code></li> <li><code>RX</code>/<code>TX</code> Pins: <code>Serial1</code></li> </ul> <li>Only one SPI bus is defined.</li> </ul></p> <p>For digital pins, users will need to declare the <code>pinMode()</code> (link) in the setup of their sketch (programs written in the Arduino IDE) for the pins used.</p>"},{"location":"hardware_overview/#input","title":"Input","text":"<p>When configured properly, an input pin will be looking for a HIGH or LOW state. Input pins are High Impedance and takes very little current to move the input pin from one state to another.</p>"},{"location":"hardware_overview/#output","title":"Output","text":"<p>When configured as an output the pin will be at a HIGH or LOW voltage. Output pins are Low Impedance: This means that they can provide a relatively substantial amount of current to other circuits.</p> <p>Warning</p> <p>\u26a1 There are electrical limitations to the amount of current that the ESP32-WROOM module can sink or source. For more details, check out the ESP32-WROOM module datasheet.</p>"},{"location":"hardware_overview/#additional-functions","title":"Additional Functions","text":"<p>There are several pins that have special functionality in addition to general digital I/O. These pins and their additional functions are listed in the tabs below. For more technical specifications on the I/O pins, you can refer to the schematic, ESP32-WROOM module datasheet, ESP32 SoC datasheet, and documentation for the ESP32 Arduino core.</p>"},{"location":"hardware_overview/#analog-input-pins","title":"Analog Input Pins","text":"<p>The ESP32-WROOM module provides a 12-bit ADC input on thirteen of its I/O pins. This functionality is accessed in the Arduino IDE using the <code>analogRead(pin)</code> function. (*The available ADC pins are highlighted in the image below.)</p> <p></p> <p>Note</p> <p>By default, in the Arduino IDE, <code>analogRead()</code> returns a 10-bit value. To change the resolution of the value returned by the <code>analogRead()</code> function, use the <code>analogReadResolution(bits)</code> function.</p> <p>Note</p> <p><p>To learn more about analog vs. digital signals, check out this great tutorial.</p> <p> Analog vs. Digital </p></p> <p></p> <p> Analog input pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#pwm-and-analog-dac-output-pins","title":"PWM and Analog (DAC) Output Pins","text":"<p>The ESP32-WROOM module supports up to sixteen channels of 20-bit PWM (Pulse Width Modulation) outputs on any of its I/O pins. This is accessed in the Arduino IDE using the <code>analogWrite(pin, value)</code> function or the LED Control API. (*Any I/O pin can be used for the PWM outputs; the available DAC pins, with true analog outputs, are highlighted in the image below.)</p> <p></p> <p>Note</p> <p><p>By default, in the Arduino IDE, <code>analogWrite()</code> accepts an 8-bit value. To change the resolution of the PWM signal for the <code>analogWrite()</code> function, use the <code>analogWriteResolution(bits)</code> function.</p> <p>(*The PWM output is not a true analog signal. For a true analog output, please refer to the DAC API for <code>GPIO 25</code> and <code>GPIO 26</code>.)</p></p> <p>Note</p> <p><p>Note: To learn more about pulse width modulation (PWM), check out this great tutorial.</p> <p> Pulse Width Modulation </p></p> <p> Any I/O pin can be used for a PWM output, but these are the DAC pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#serial-communication-pins","title":"Serial Communication Pins","text":"<p>The ESP32-WROOM module provides three UART ports. By default, the UART port for the USB connection (<code>Serial</code>) and the labeled UART I/O pins on the board (<code>Serial1</code>) can be accessed through the Arduino IDE using the serial communication class.</p> <p></p> <p>Note</p> <p>By default, in the Arduino IDE, the SparkFun ESP32 Thing Plus C board definition supports:       <ul> <li><code>Serial</code> - UART (USB)</li> <li><code>Serial1</code> - Pins: <code>RX</code>/<code>TX</code> (<code>GPIO 16</code>/<code>GPIO 17</code>)</li> </ul> In order to utilize the serial communication on the strapping pins, users will need to create a custom serial port object and declare which pins to access.</p> <p>Note</p> <p><p>Note: To learn more about serial communication, check out this great tutorial.</p> <p> Serial Communication </p></p> <p> Default UART ports on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Note</p> <p><p>We have noticed that with the ESP32 Arduino core, <code>Serial.available()</code> does not operate instantaneously. This is due to an interrupt triggered by the UART, to empty the FIFO when the <code>RX</code> pin is inactive for two byte periods:     <ul> <li>At 9600 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> + 2] x 1 ms = 11 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> <li>At 115200 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> + 2] x .087 ms = ~1 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> </ul> </p> <p>For more information, please refer to this  chatroom discussion.</p></p>"},{"location":"hardware_overview/#spi-communication","title":"SPI Communication","text":"<p>The ESP32-WROOM module provides three SPI buses. By default, in the Arduino IDE, the SPI class is configured to utilize pins <code>GPIO 18</code> (SCK), <code>GPIO 19</code> (POCI), <code>GPIO 23</code> (PICO). These pins share the same SPI bus as the \u00b5SD card slot, which utilizes pin <code>5</code> (<code>SS</code>) for its chip select. In order to utilize the other SPI ports or objects, users will need to create a custom SPI object and declare which pins to access.</p> <p>Note</p> <p>To comply with the latest OSHW design practices, we have adopted the new SPI signal nomenclature (SDO/SDI and PICO/POCI). The terms Master and Slave are now referred to as Controller and Peripheral. The <code>MOSI</code> signal on a controller has been replaced with <code>SDO</code> or <code>PICO</code>. Please refer to this announcement on the decision to deprecate the MOSI/MISO terminology and transition to the SDO/SDI naming convention.</p> <p></p> <p> SCK <code>GPIO 18</code> (<code>SCK</code>) SDI or POCI <code>GPIO 19</code> (<code>MISO</code>) SDO or PICO <code>GPIO 23</code> (<code>MOSI</code>) CS (\u00b5SD Card) <code>GPIO 5</code> (<code>SS</code>) </p> <p>Note</p> <p>To learn more about the serial peripheral interface (SPI) protocol, check out this great tutorial. <p> Serial Peripheral Interface (SPI) </p></p> <p> Default SPI bus connections on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#i2c-communication-pins","title":"I<sup>2</sup>C Communication Pins","text":"<p>The ESP32-WROOM module module can support up to two I<sup>2</sup>C buses. By default, in the Arduino IDE, the Wire class is configured to utilize pins <code>GPIO 21</code> (SDA) and <code>GPIO 22</code> (SCL). These pins share the same I<sup>2</sup>C bus with the Qwiic connector and MAX17048 fuel gauge. In order to utilize the other  I<sup>2</sup>C ports, users will need to create a custom Wire object and declare which pins to access.</p> <p></p> <p> SCL <code>GPIO 22</code> (<code>SCL</code>) SDA <code>GPIO 21</code> (<code>SDA</code>) </p> <p>Note</p> <p>To learn more about the inter-integrated circuit (I<sup>2</sup>C) protocol, check out this great tutorial.</p> <p> I2C </p> <p> </p> <p> Default I<sup>2</sup>C bus connections for the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>There are two buttons on ESP32-WROOM Thing Plus; a RST and BOOT button.</p>"},{"location":"hardware_overview/#reset-button","title":"Reset Button","text":"<p>The RST (reset) button allows users to reset the program running on the ESP32-WROOM module without unplugging the board.</p> <p> RST button on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#boot-button","title":"Boot Button","text":"<p>The BOOT button can be used to force the board into the serial bootloader. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause it to enter the Firmware Download mode. The board will remain in this mode until it power cycles (happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer with through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board. </li> </ul> </li> </ol> <p> BOOT button on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Warning</p> <p>\u26a1 The BOOT button is also connected to <code>GPIO 0</code>, which controls the voltage output to the Qwiic connector. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"hardware_overview/#indicator-leds","title":"Indicator LEDs","text":"<p>There are four indicator LEDs on the ESP32-WROOM Thing Plus:</p> <ul> <li><code>PWR</code>: Power (Red)</li> <li><code>CHG</code>: Battery Charging (Yellow)</li> <li><code>13</code>: <code>GPIO 13</code> (Blue)</li> <li><code>WS2812</code>: <code>GPIO 02</code> (RGB)</li> </ul>"},{"location":"hardware_overview/#power-led","title":"Power LED","text":"<p>The red, power (<code>PWR</code>) LED will light up once 3.3V is supplied to the board. For most users, it will light up when 5V is supplied through the USB connection and/or when a LiPo battery is attached to the JST connector. </p> <p> ESP32-WROOM Thing Plus <code>PWR</code> status LED indicator. (Click to enlarge) </p>"},{"location":"hardware_overview/#battery-charging-led","title":"Battery Charging LED","text":"<p>The yellow, battery charging (<code>CHG</code>) LED indicates the status of the MCP73831 charge management controller. The LED will shut off when no battery is present, when the charge management controller is in standby (after the battery charging has been completed), or when the charge management controller is shutdown. The LED will illuminate when the charge management controller is in the process of charging the battery. For more information, please refer to the MCP73831 datasheet.</p> The battery charging (<code>CHG</code>) LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) Charge Cycle State LED                          Shutdown                         <ul> <li>Thermal Shutdown</li> <li>V<sub>DD</sub> &lt; V<sub>BAT</sub></li> </ul> Off (High Z) No Battery Present Off (High Z) Charge Complete \u2013 Standby Off (H) Preconditioning On (L) Constant-Current Fast Charge On (L) Constant Voltage On (L)"},{"location":"hardware_overview/#stat-led","title":"STAT LED","text":"<p>The blue, status (<code>STAT</code>) LED is typically used as a test or status LED to make sure that a board is working or for basic debugging. This indicator is connected to <code>GPIO 13</code>.</p> <p> The status (<code>STAT</code>) LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#ws2812-rgb-led","title":"WS2812 RGB LED","text":"<p>The WS2812 RGB LED is controlled with a 24-bit (GRB) data signal. This indicator is connected to <code>GPIO 02</code> and the digital output pin from the LED is available through a test point. For more information, please refer to the WS2812C datasheet.</p> <p> <code>WS2812</code> LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Note</p> <p>The latest ESP32 Arduino core, now provides a basic RGB LED driver for a WS2812 (or NeoPixel) LED populated the board. For an example of how to utilize the RGB LED driver check out the BlinkRGB example code, which can be accessed from the File drop down menu (i.e File &gt; Examples &gt; ESP32 &gt; GPIO &gt; BlinkRGB).</p>"},{"location":"hardware_overview/#sd-slot","title":"\u00b5SD Slot","text":"<p>Note</p> <p>To comply with the latest OSHW design practices, we have adopted the new SPI signal nomenclature (SDO/SDI and PICO/POCI). The terms Master and Slave are now referred to as Controller and Peripheral. Please refer to this announcement on the decision to transition to the new naming convention.</p> <p>The ESP32-WROOM Thing Plus (USB-C) includes an \u00b5SD card slot. This is great for data logging applications or storing files. The \u00b5SD card slot is connected to the following dedicated GPIO:</p> <ul> <li><code>GPIO 5</code>: <code>DATA 3</code>/<code>CS</code></li> <li><code>N/A</code>: <code>DATA 2</code></li> <li><code>N/A</code>: <code>DATA 1</code></li> <li><code>GPIO 19</code>: <code>DATA 0</code>/<code>POCI</code> (or Peripheral's <code>SDO</code>)</li> <li><code>GPIO 18</code>: <code>CLK</code>/<code>SCK</code></li> <li><code>GPIO 23</code>: <code>CMD</code>/<code>PICO</code> (or Peripheral's <code>SDI</code>)</li> </ul> <p> \u00b5SD card slot on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>There are two jumpers on the back of the board that can be used to easily modify the hardware connections on the board.</p> <ul> <li>SHLD - This jumper can be used to disconnect the USB shield from <code>GND</code>.</li> <li>PWR - This jumper can be used to remove power to the <code>PWR</code> LED. </li> <li>CHG LED - This jumper can be used to remove power to the <code>CHG</code> LED.<ul> <li>Avoid cutting the box's silkscreen; there are traces under it:  Traces around the <code>CHG LED</code> jumper. (Click to enlarge) </li> </ul> </li> </ul> <p>Note</p> <p><p>Never modified a jumper before? Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <p> How to Work with Jumper Pads and PCB Traces </p></p> <p> The jumpers on the back of the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#primary-i2c-bus","title":"Primary I<sup>2</sup>C Bus","text":"<p>The Qwiic connector and battery fuel gauge are attached to the primary I<sup>2</sup>C bus. The primary I<sup>2</sup>C bus for this board utilizes the pin connections, detailed in the table below:</p> <p>                  Connection              <code>VDD</code> <code>GND</code> <code>SCL</code> <code>SDA</code>                  Battery Fuel Gauge (MAX17048) <code>VBAT</code> GND <code>GPIO 22</code> <code>GPIO 21</code>                  Qwiic Connector              <code>GPIO 0</code> (Enables 3.3V) GND <code>GPIO 22</code> <code>GPIO 21</code> </p>"},{"location":"hardware_overview/#battery-fuel-gauge","title":"Battery Fuel Gauge","text":"<p>The MAX17048 fuel gauge measures the approximate charge or discharge rate, state of charge (SOC) (based on ModelGauge algorithm), and voltage of a connected battery. Additionally, the chip is powered directly from <code>VBAT</code>, when a LiPo battery is connected. For more information, please refer to the MAX17048 datasheet.</p> The MAX17048 fuel gauge on the ESP32-WROOM Thing Plus. (Click to enlarge) I<sup>2</sup>C Address 0x36 (7-bit) 0x6C (write)/0x6D (read)                      Voltage Measurement                          Range: 2.5 - 5 V                         Precision: \u00b17.5 mV/Cell                         Resolution 1.25 mV/Cell                      Current Consumption                          Sleep: .5 - 2 \u00b5A                         Hibernate: 3 - 5 \u00b5A                         Active: 23 - 40 \u00b5A                      <p>Note</p> <p>The <code>Alert</code> pin for the MAX17048 is not connected and cannot be utilized.</p>"},{"location":"hardware_overview/#qwiic-connector","title":"Qwiic Connector","text":"<p>A Qwiic connector is provided for users to seamlessly integrate with SparkFun's Qwiic Ecosystem.</p> <p> Qwiic connector and I<sup>2</sup>C pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"hardware_overview/#power-control_1","title":"Power Control","text":"<p>In order to enable power for the Qwiic connector, users must toggle <code>GPIO 0</code> high. This enables the power output from the XC6222 LDO regulator to the Qwiic connector, which can sources up to 700mA at 3.3V . In order to conserve battery power or in low power applications, users will can toggle <code>GPIO 0</code> low, to disable the power to the Qwiic connector.</p> <p>Warning</p> <p>\u26a1 <code>GPIO 0</code> is also connected to the BOOT button. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"hardware_overview/#what-is-qwiic","title":"What is Qwiic?","text":"<p>The Qwiic system is intended a quick, hassle-free cabling/connector system for I<sup>2</sup>C devices. Qwiic is actually a play on words between \"quick\" and I<sup>2</sup>C or \"iic\".</p> <p> <p></p> <p>Features of the Qwiic System</p> <p>No Soldering - Keep your soldering iron at bay <p>Cables plug easily between boards making quick work of setting up a new prototype. We currently offer three different lengths of Qwiic cables as well as a breadboard friendly cable to connect any Qwiic enabled board to anything else. Initially you may need to solder headers onto the shield to connect your platform to the Qwiic system but once that\u2019s done it\u2019s plug and go!</p> Qwiic cables connected to Spectral Sensor Breakout <p>Polarized Connector - Minimize your mistakes</p> <p>How many times have you swapped the SDA and SCL wires on your breadboard hoping the sensor will start working? The Qwiic connector is polarized so you know you\u2019ll have it wired correctly, every time, from the start.</p> <p>The PCB connector is part number SM04B-SRSS (Datasheet) or equivalent. The mating connector used on cables is part number SHR04V-S-B or equivalent. This is a common and low cost connector.</p> 1mm pitch, 4-pin JST connector <p>Daisy Chain - Expand with ease</p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them allowing multiple devices to be connected.</p> <p> Shown above: Qwiic Shield for Arduino on RedBoard, Spectral Sensor Breakout - NIR, Spectral Sensor Breakout - Visible and SparkFun GPS Breakout</p>"},{"location":"readme/","title":"Readme","text":"<p>This folder contains the assets and markdown files, which are used for the SparkFun Thing Plus - ESP32 WROOM (USB-C) Product Manual. The documentation is built with mkdocs utilizing the [Materials theme]( link here.</p>"},{"location":"readme/#documentation-guidelines","title":"Documentation Guidelines","text":""},{"location":"readme/#file-organization","title":"File Organization","text":"<p>The documentation files are organized in the following fashion:</p> <ul> <li>All markdown files with the documentation for the product manual should be organized into separate sections.</li> <li>All assets utilized in the documentation (i.e. images, pdf's, example code, etc.) should be organized in folders.</li> </ul>"},{"location":"readme/#file-contents","title":"File Contents","text":"<ul> <li><code>index.md</code><ul> <li>Introduction section (before Required Materials section)</li> </ul> </li> <li><code>getting_started.md</code><ul> <li>Introduction section (after Required Materials section)<ul> <li>Required Materials section</li> <li>Suggested Readings section</li> </ul> </li> </ul> </li> <li><code>hardware_overview.md</code><ul> <li>Normal Hardware Overview section</li> </ul> </li> <li><code>hardware_assembly.md</code><ul> <li>Normal Hardware Assembly section</li> </ul> </li> <li><code>software_overview.md</code><ul> <li>Normal Software Overview section</li> </ul> </li> <li><code>troubleshooting_tips.md</code><ul> <li>Normal Troubleshooting Tips section</li> </ul> </li> <li><code>board_files.md</code><ul> <li>Links to resources in the <code>board_files</code> folder<ul> <li>board dimensions (PDF): <code>dimensions.pdf</code><ul> <li>PDF of the board dimensions</li> </ul> </li> <li>schematic (PDF): <code>schematic.pdf</code><ul> <li>PDF of the board's schematic</li> </ul> </li> <li>eagle files (ZIP): <code>eagle_files.zip</code><ul> <li>ZIP folder containing the <code>*.sch</code> and <code>*.brd</code> files</li> </ul> </li> <li>graphical datasheet (PDF): <code>graphical_datasheet.pdf</code> (if available)<ul> <li>PDF of the graphical datasheet</li> </ul> </li> </ul> </li> </ul> </li> <li><code>component_datasheets.md</code><ul> <li>Links to resources in the <code>component_datasheets</code> folder<ul> <li>The relevant datasheets for the board components in a PDF format</li> </ul> </li> </ul> </li> <li><code>resources-sparkfun.md</code><ul> <li>Links to our website<ul> <li>Product page</li> <li>SparkFun hookup guide page (if available, old Learn website)</li> <li>Product video</li> <li>Pillar pages (i.e. Qwiic, Thing Plus, MicroMod, etc.)</li> <li>Technical assistance page</li> </ul> </li> </ul> </li> <li><code>resources-manufacturer.md</code><ul> <li>Links to resources from the manufacturer's website<ul> <li>Product page</li> <li>Product resources (if available)</li> <li>Contact page</li> <li>Forum</li> <li>Community forum</li> <li>etc.</li> </ul> </li> </ul> </li> <li><code>file_issue.md</code> (use template)<ul> <li>Guidelines/information for filing issues</li> </ul> </li> <li><code>contribute.md</code> (use template)<ul> <li>Guidelines/information for filing pull requests</li> </ul> </li> </ul>"},{"location":"readme/#asset-folders","title":"Asset Folders","text":"<p>Assets, such as example code, <code>*.pdf</code> files, or images that are linked in the documentation, should be organized in folders.</p> <ul> <li><code>board_files</code> Folder<ul> <li>This folder should contain:<ul> <li>board dimensions (PDF): <code>dimensions.pdf</code><ul> <li>PDF of the board dimensions</li> </ul> </li> <li>schematic (PDF): <code>schematic.pdf</code><ul> <li>PDF of the board's schematic</li> </ul> </li> <li>eagle files (ZIP): <code>eagle_files.zip</code><ul> <li>ZIP folder containing the <code>*.sch</code> and <code>*.brd</code> files</li> </ul> </li> <li>graphical datasheet (PDF): <code>graphical_datasheet.pdf</code> (if available)<ul> <li>PDF of the graphical datasheet</li> </ul> </li> </ul> </li> </ul> </li> <li><code>component_datasheets</code> Folder<ul> <li>This folder should contain the relevant datasheets for the board components in a PDF format<ul> <li>Including those linked in the documentation</li> <li>Example exception: restrictions by manufacturer</li> </ul> </li> </ul> </li> <li><code>graphical_datasheet</code> Folder (if available)<ul> <li>This folder should contain the graphical datasheet for the development board</li> <li>Example exception: board use a third-party SDK</li> </ul> </li> <li><code>img</code> Folder<ul> <li><code>sfe_logo_sm.png</code> - SparkFun flame logo (links to the homepage)</li> <li><code>hookup_guide</code> Folder<ul> <li>This folder should contain the images for the following hookup guide sections:<ul> <li><code>hardware_overview.md</code></li> <li><code>hardware_assembly.md</code></li> <li><code>software_overview.md</code></li> </ul> </li> </ul> </li> <li><code>arduino_example*</code> Folder<ul> <li>These should be separate folders for individual examples (i.e. <code>arduino_example1</code>, <code>arduino_example2</code>, <code>arduino_example-name</code>, etc.)</li> </ul> </li> <li>other Folders<ul> <li>Any other image files, which may be useful<ul> <li>May or may not be included in the documentation</li> <li>May be available for future use</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"readme/#content-navigation","title":"Content Navigation","text":"<pre><code>nav:\n  - &lt;Enter Product Name&gt;: index.md\n  - Product Manual:\n    - Required Materials: getting_started.md\n    - Hardware Overview: hardware_overview.md\n    - Hardware Assembly: hardware_assembly.md\n    - Software Overview: software_overview.md\n  - Product Resources:\n    - Board Files: board_files.md\n    - Hardware Datasheets: component_datasheets.md\n    - &lt;Enter Manufacturer's Name&gt; Resources: resources-manufacturer.md\n    - SparkFun's Resources: resources-sparkfun.md\n    - Troubleshooting Tips: troubleshooting_tips.md\n  - Contribution/Issues:\n    - Issues: file_issue.md\n    - Contribute: contribute.md\n</code></pre>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#product-resources","title":"Product Resources","text":"<ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> <li>Graphical Datasheet (PDF)</li> <li>SFE Product Showcase Video</li> <li>GitHub Hardware Repo</li> </ul>"},{"location":"resources/#additional-resources","title":"Additional Resources","text":"<ul> <li>SparkFun Learn - Hookup Guide</li> <li>SparkFun Thing Plus Boards</li> <li>SparkFun Qwiic Connect System</li> <li>SparkFun Technical Assistance</li> </ul>"},{"location":"resources/#hardware-component-documentation","title":"Hardware Component Documentation","text":"<ul> <li>ESP32 Module<ul> <li>ESP32-WROOM Module (PDF)<ul> <li>ESP32 SoC (PDF)</li> </ul> </li> </ul> </li> <li>Power Components<ul> <li>Voltage Regulator: XC6222 (PDF)</li> <li>Battery:<ul> <li>Charge Controller: MCP73831 (PDF)</li> <li>Fuel Gauge: MAX17048 (PDF)</li> </ul> </li> </ul> </li> <li>LED: WS2812 (PDF)</li> </ul>"},{"location":"resources/#manufacturers-resources","title":"Manufacturer's Resources","text":"<p>Espressif also provides great resources for their ESP32 module: </p> <ul> <li>ESP32 Product Resource Page</li> <li>Espressif's Forum for the ESP32</li> <li>Espressif GitHub Repositories<ul> <li>ESP32 Arduino Core<ul> <li><code>.json</code> file needed for Epressif's ESP32 Arduino Core: <code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</code></li> </ul> </li> <li>ESP-IDF -- IoT Development Framework<ul> <li>Programming Guide.</li> </ul> </li> </ul> </li> </ul>"},{"location":"single_page/","title":"Single-Page View","text":""},{"location":"single_page/#introduction","title":"Introduction","text":"<p>Note</p> <p>This guide is specific to the ESP32 Thing Plus (USB-C) board variant. For the variants with the USB micro-B connector, please refer to the ESP32 Thing Plus hookup guide.</p> <p> </p>"},{"location":"single_page/#sparkfun-thing-plus-esp32-wroom-usb-c","title":"SparkFun Thing Plus - ESP32 WROOM (USB-C)","text":"<p>The SparkFun ESP32-WROOM Thing Plus (USB-C) enjoys all the features of our previous ESP32 Thing Plus (Micro-B) boards, but with a few improvements. For this variant, we have included an SD card slot, upgraded to a USB-C connector, integrated an RGB status LED and battery fuel gauge, and provided two voltage regulators; offering separate 700mA current sources for the board and Qwiic connector. The board still retains its standardized 28-pin Feather footprint, 2-pin JST battery connector, and Qwiic connector like our other Thing Plus boards.</p> <p>"},{"location":"single_page/#sparkfun-thing-plus-esp32-wroom-usb-c_1","title":"SparkFun Thing Plus - ESP32 WROOM (USB-C)","text":"<p>(WRL-20168) </p> <p> <p></p> <p>The ESP32-WROOM module on the board provides a rich set of peripherals, ranging from capacitive touch sensors, Hall sensors, SD card interface, Ethernet, high-speed SPI, UART, I<sup>2</sup>S, and I<sup>2</sup>C. With Espressif's ESP32 comprehensive development platform and Bluetooth low-energy support (i.e BLE, BT4.0, Bluetooth Smart) these boards are jam-packed with possibilities!</p> <p>Note</p> <p>The CH340C serial-to-UART bridge is used on this board. Therefore, a different driver installation is required from previous versions of the ESP32 Thing Plus.</p> <p>Warning</p> <p><p>Not Yet Implemented: The Arduino core for the ESP32 microcontroller is still a work in progress. There are a handful of peripherals and features that have yet to be implemented, including:</p> <p><ul> <li>Analog Output (<code>analogWrite([pin], [value])</code>)         <ul> <li>Alternative: LED Control API</li> </ul> </li> <li>Pulse Counter</li> <li>SDIO</li> <li>Timer/Real-Time Clock         <ul> <li>Alternative: ESP32Time Arduino library</li> </ul> </li> <li>TWAI <p>The peripherals are available (if, also, still in their infancy) in the IoT Development Framework for the ESP32. If your application requires any of the features above, consider giving the ESP-IDF a try! (Updated: June 2022.)</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. Now some users may have a few of these items, feel free to modify your cart accordingly.</p> <ul> <li>SparkFun Thing Plus - ESP32 WROOM (USB-C)</li> <li>USB 3.1 Cable A to C - 3 Foot - The USB interface serves two purposes: it powers the board and allows users to upload programs. (*If your computer doesn't have a USB-A slot, then choose an appropriate cable or adapter.)</li> <li>Computer with an operating system (OS) that is compatible with all the software installation requirements.</li> </ul> USB 3.1 Cable A to C - 3 Foot              CAB-14743          SparkFun Thing Plus - ESP32 WROOM (USB-C)              WRL-20168"},{"location":"single_page/#headers-accessories","title":"Headers &amp; AccessoriesBreak Away Headers - StraightSparkFun Beginner Tool KitFeather Stackable Header KitPhoton Header - 12 Pin FemaleHeader - 8-pin Female (PTH, 0.1\")","text":"<p>Headers are great for development purposes, letting users swap parts with just a set of jumper wires. If you would like to add headers to your board, check out some of the options for the Thing Plus or Feather form factor boards below. For a full selection of our available Headers or Soldering Tools, click on the associated links.</p>              PRT-00116                       TOL-14681                       PRT-15187                       PRT-14321                        PRT-11895            <p>Note</p> <p><p>New to soldering? Check out our Through-Hole Soldering Tutorial for a quick introduction!</p> <p> How to Solder: Through-Hole Soldering </p></p>"},{"location":"single_page/#li-po-battery","title":"Li-Po BatteryLithium Ion Battery - 2AhLithium Ion Battery - 400mAhLithium Ion Battery - 1AhLithium Ion Battery - 110mAh","text":"<p>For mobile applications, users will want to pick up a single-cell LiPo battery from our catalog. Below, are a few available options:</p>              PRT-13855                       PRT-13851                       PRT-13813                       PRT-13853"},{"location":"single_page/#jumper-modification","title":"Jumper ModificationSolder Lead Free - 100-gram SpoolWeller WLC100 Soldering StationChip Quik No-Clean Flux Pen - 10mLHobby Knife","text":"<p>To modify the jumpers, users will need soldering equipment and/or a knife.</p>              TOL-09325                       TOL-14228                       TOL-14579                       TOL-09200          <p>Note</p> <p><p>New to jumpper pads? Check out our Jumper Pads and PCB Traces Tutorial for a quick introduction!</p> <p> How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>As a more advanced development board, we will skip over the more fundamental tutorials (i.e. Ohm's Law and What is Electricity?). However, below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> Serial Communication Analog vs. Digital Pulse Width Modulation Logic Levels I2C Serial Peripheral Interface (SPI) How to Install CH340 Drivers ESP32 Thing Plus Hookup Guide Installing the Arduino IDE Installing Board Definitions in the Arduino IDE How to Solder: Through-Hole Soldering How to Work with Jumper Pads and PCB Traces <p> <p></p> <p>One of the new, advanced features of the board is that it takes advantage of the Qwiic connect system. We recommend familiarizing yourself with the Logic Levels and I<sup>2</sup>C tutorials.  Click on the banner above to learn more about Qwiic products.</p> <p> </p>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>Note</p> <p>              All mentions of <code>GPIO</code> in this section will refer to the I/O pins of the ESP32-WROOM module as represented in the datasheets and pin numbers of the board definition in the ESP32 Arduino core. They do not correspond with the net names for the ThingPlus Form Factor device in the schematic. (The device in the schematic is primarily, used internally to facilitate the board design process; just ignore the naming of the <code>GPIO0</code> - <code>GPIO6</code> nets.) (Click to enlarge) </p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below. The listed measurements are in inches and the two mounting holes are compatible with 4-40 standoff screws.</p> <p> Board dimensions (PDF) for the ESP32-WROOM Thing Plus, in inches. (Click to enlarge) </p>"},{"location":"single_page/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB connector is provided to power and program the board. For most users, it will be the primary programing interface for the ESP32.</p> <p> USB-C connector on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#ch340-serial-to-uart","title":"CH340 Serial-to-UART","text":"<p>The CH340 allows the ESP32-WROOM to communicate with a computer/host device through the board's USB-C connection. This allows the board to show up as a device on the serial (or COM) port of the computer. Users will need to install the latest drivers for the computer to recognize the board (see Software Overview section).</p>"},{"location":"single_page/#power","title":"Power","text":"<p>The ESP32-WROOM Thing Plus only requires 3.3V to power the board. However, the simplest method to power the board is through the USB-C connector. Alternatively, the <code>3V3</code>, <code>VBAT</code>, and <code>VUSB</code> pins can also be used to supply power to the board.</p> <ul> <li><code>VUSB</code>:<ul> <li>The maximum voltage for the LDOs and charge controller is 6V.</li> <li>The minimum voltage for the charge controller is 3.75V.</li> </ul> </li> <li><code>VBAT</code>:<ul> <li>Should not be connected to anything other than a single-cell LiPo battery.</li> </ul> </li> <li><code>3V3</code>:<ul> <li>Requires a regulated 3.3V.</li> <li>Only powers the board and not the Qwiic connector.</li> </ul> </li> </ul> <p> ESP32-WROOM Thing Plus power connections. (Click to enlarge) </p> <p>Below, is a general summary of the power circuitry on the board:</p> <ul> <li><code>3V3</code> - Provides a regulated 3.3V from the USB (5V) power and/or battery connections.<ul> <li>Used to power the ESP32-WROOM module, \u00b5SD card slot, WS2812 RGB LED, CH340C Serial-to-UART bridge, and power LED.<ul> <li>The Qwiic connector is powered by its own voltage regulator, from the same power source(s).</li> </ul> </li> <li>The 3.3V XC6222 LDO regulator can source up to 700mA.<ul> <li>Output is controlled by the <code>EN</code> pin on the board.</li> </ul> </li> </ul> </li> <li><code>VUSB</code> - The voltage from the USB-C connector, usually 5V.<ul> <li>Power source for the entire board.<ul> <li>Powers the 3.3V voltage regulators and the battery charging circuit for <code>VBAT</code>.</li> </ul> </li> <li>Overides power from the battery through a P-channel MOSFET, when both are connected.</li> <li>Utilizes a BAT20J protection diode for the USB-C connection.</li> </ul> </li> <li><code>VBAT</code> - The voltage from the JST battery connector; meant for single cell LiPo batteries.<ul> <li>Provides power to the 3.3V voltage regulators and MAX17048 battery fuel gauge.</li> <li>The MCP73831 linear charge management controller is powered from the USB (5V) power supply.<ul> <li>The charge controller is configured for 500mA (max) rate of charge to a connected battery.</li> </ul> </li> </ul> </li> <li><code>GND</code> - The common ground or the 0V reference for the voltage supplies.</li> <li>Qwiic Connector - Provides a regulated 3.3V voltage from the USB (5V) power and/or battery connections.<ul> <li>Operates independently from the <code>3V3</code> pin, with its own voltage regulator.</li> <li>The 3.3V XC6222 LDO regulator can source up to 700mA.<ul> <li>Output is controlled by <code>GPIO 0</code> of the ESP32-WROOM.</li> </ul> </li> </ul> </li> </ul> <p>For more details, users can reference the schematic and the datasheets of the individual components in the power circuitry.</p>"},{"location":"single_page/#power-status-led","title":"Power Status LED","text":"<p>The red, <code>PWR</code> LED will light up once 3.3V is supplied to the board; however, for most users, it will light up when 5V is supplied through the USB connection or when a LiPo battery is connected to the JST connector.</p> <p> ESP32-WROOM Thing Plus <code>PWR</code> status LED indicator. (Click to enlarge) </p>"},{"location":"single_page/#charging-circuit","title":"Charging Circuit","text":"<p>The charging circuit utilizes the MCP73831 linear charge management controller and is powered directly from the USB-C connector or <code>VUSB</code>. The controller is configured for a 500mA charge rate and active charging is indicated by the yellow, <code>CHG</code> LED. If the charge controller is shutdown or charging is complete, the <code>CHG</code> LED will turn off. For more information, please refer to the MCP73831 datasheet and the Indicator LEDs section below.</p>"},{"location":"single_page/#power-control","title":"Power Control","text":"<p>The power source for the XC6222 LDO voltage regulators is controlled by a P-channel MOSFET. In addition, the 3.3V regulated output from the XC6222 LDOs are enabled by the control pin (<code>CE</code>).</p> <p> Circuits for the 3.3V power on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>The P-channel MOSFET operates based on the voltages at the MOSFET's gate and source pins. Depending on the power supplies connected to the board, the MOSFET will switch between the battery and USB-C connection as power sources for the XC6222 voltage regulators.</p>              Power             Source          MOSFET Power Control Description Gate Source              V<sub>GS</sub>             (V<sub>Gate</sub> - V<sub>Source</sub>)              MOSFET             Operation          USB Only V<sub>USB</sub> = 5V V<sub>USB</sub> - V<sub>f</sub>              V<sub>USB</sub> - (V<sub>USB</sub> - V<sub>f</sub>)             V<sub>GS</sub> = V<sub>f</sub>              MOSFET Off             R<sub>GS</sub> = \u221e             Switch Open          Power to the XC6222 is supplied by the USC-C connection.             Power from the USB-C connection is passed through the Schottky diode. Due to the voltage drop from the Schottky diode, the gate threshold voltage for the MOSFET is positive and equivalent to the diode's forward voltage (V<sub>f</sub>).Therefore, the MOSFET behaves as an open switch.          Battery Only V<sub>USB</sub> = 0V Dep. Mode:             V<sub>Source</sub> = 0 Charged Cap.:             V<sub>Batt</sub> = 3 - 4.2V          Dep. Mode:             V<sub>GS</sub> = 0 Charged Cap.:             V<sub>USB</sub> - V<sub>Batt</sub> = -V<sub>Batt</sub>             -3V &gt; V<sub>GS</sub> &gt; -4.2V                       MOSFET On             R<sub>GS</sub> = Low             Switch Closed          Power to the XC6222 is supplied from the battery connection.             As a depletion type P-channel MOSFET, the mosfet acts as a normally closed switch when the gate threshold voltage is zero. Therefore, power from the battery is able to charge the capacitor and create a negative gate threshold voltage. The MOSFET remains behaving as a closed switch and power to the XC6222 is provided from the battery.          USB &amp; Battery V<sub>USB</sub> = 5V V<sub>USB</sub> - V<sub>f</sub> V<sub>GS</sub> = V<sub>f</sub>              MOSFET Off             R<sub>GS</sub> = \u221e             Switch Open          Power to the XC6222 is supplied by the USC-C connection.             Power from the USB-C connection is passed through the Schottky diode. Due to the voltage drop from the Schottky diode, the gate threshold voltage for the MOSFET is positive and equivalent to the diode's forward voltage (V<sub>f</sub>).Therefore, the MOSFET behaves as an open switch.          <p>The control pin (<code>CE</code>) of the XC6222 LDOs also provides an additional amount of control for the board's power. By default, the regulated 3.3V output is enabled. To disable and shutdown the output voltage from the XC6222, the control pin needs to be pulled low (i.e. shorted to ground (<code>GND</code>)). For more information, please refer to the XC6222 datasheet.</p> <ul> <li>The 3.3V power for the board (<code>3V3</code>) is controlled by the <code>EN</code> pin, which is broken out on the board.</li> <li>The 3.3V power for the Qwiic connector is controlled by <code>GPIO 0</code> of the ESP32-WROOM.</li> </ul> <p> XC6222 control pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Warning</p> <p>\u26a1 Note: The BOOT button is also connected to <code>GPIO 0</code>. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"single_page/#current-consumption","title":"Current Consumption","text":"<p>According to the specifications, the ESP32-WROOM draws about 240 mA during RF transmissions. With the WiFi example in this tutorial, have measured it to average around 140 mA and peak at 300 mA while actively transceiving. The table below, summarizes the approximate current draw of the ESP32-WROOM Thing Plus (USB-C) for various operational conditions. The measurements in the table below, were made with the Nordic Power Profiler Kit II.</p> Operation Avg. Current Draw              LiPo: 3.5V (Low &lt; 5%)              LiPo: 3.7V (~15%)              LiPo: 4.2V (~100%)              USB-C: 5V (No Battery) Idle (Blank Code)              63 mA 86 mA (peak)              63.5 mA 89 mA (peak)              64 mA 88.6 mA (peak)              67 mA 89.9 mA (peak) Idle: USB + Battery Power              --                       --                       90.5 \u00b5A 721 \u00b5A (peak)              N/A                       Idle: Battery Charging (Current from USB-C)              395 mA 420 mA (peak)              590 mA 600 mA (peak)              &gt; 110 mA (before shutdown)              N/A          RGB (White @ 100%)              78.4 mA 105.9 mA (peak)              79 mA 106.8 mA (peak)              79.9 mA 105.3 mA (peak)              82.5 mA 108.2 mA (peak)              WiFi Example (Transceiving)              135 mA 295 mA (peak)              137 mA 310 mA (peak)              137 mA 307 mA (peak)              140 mA 300 mA (peak) Deep Sleep Example (MCU Inactive)              2.5 mA 2.95 mA (peak)              2.5 mA 3 mA (peak)              2.55 mA 3 mA (peak)              2.85 mA 3.3 mA (peak) Deep Sleep Example (MCU Inactive + Jumpers Cut)              842 \u00b5A 1.24 mA (peak)              848 \u00b5A 1.23 mA (peak)              866 \u00b5A 1.24 mA (peak)              1.19 mA 1.58 mA (peak) <p>It is possible for users to reach sub-mA power consumption levels with the deep sleep power modes. Using the <code>TimerWakeUp</code> Deep Sleep example code, the LED jumpers cut, and powering the board through the LiPo battery connection we measured a power consumption of 845 \u00b5A (990 \u00b5A peak) @ 3.7V while the MCU was inactive.</p> <p> The current measurement from <code>VBAT</code> at 3.7V during deep sleep. (Click to enlarge) </p>"},{"location":"single_page/#esp32-wroom","title":"ESP32-WROOM","text":"<p>This variant of the ESP32 Thing Plus is designed around the ESP32-WROOM module with 16MB of flash memory. Espressif's ESP32-WROOM module is a versitile, WiFi+BT+BLE MCU module that targets a wide variety of applications. At the core of this module is the ESP32-D0WDQ6 system on a chip (SoC) which is designed to be both scalable and adaptive. Its laundry list of features include:</p> <ul> <li>Xtensa\u00ae Dual-Core 32-bit LX6 Microprocessor (up to 240MHz)</li> <ul> <li>448KB ROM and 520KB SRAM</li> <li>16MB of Embedded SPI Flash Storage</li> </ul> <li>Cryptographic Hardware Accelerators</li> <ul> <li>AES, SHA2, ECC, RSA-4096</li> </ul> <li>Integrated 802.11 b/g/n WiFi 2.4GHz Transceiver (up to 150Mbps)</li> <li>Integrated dual-mode Bluetooth (Bluetooth v4.2 and BLE) </li> <li>26 GPIO (including strapping pins)</li> <ul> <li>8x Capacitive Touch Electrodes</li> </ul> <li>Operating Voltage: 3.0 to 3.6V</li> <ul> <li>WiFi: 380mA (peak)</li> <li>Light-Sleep: 800\u00b5A</li> <li>Deep-Sleep: 10 - 150\u00b5A</li> </ul> </ul> ESP32-WROOM module on the ESP32 Thing Plus (USB-C).             (Click to enlarge) <p>Warning</p> <p><p>Users should be aware of the following nuances and details of this board</p> <ul> <li>The ESP32-WROOM is only compatible with 2.4GHz WiFi networks; it will not work on the 5GHz bands.</li> <li>For details on the boot mode configuration, please refer to section 3.3 Strapping Pins of the ESP32-WROOM module datasheet.</li> </ul></p> <p>Note</p> <p><p>The ESP32-WROOM module has various power modes:</p> <ul> <li>Active -  The chip radio is powered on. The chip can receive, transmit, or listen.</li> <li>Modem Sleep - The CPU is operational and the clock is configurable. The Wi-Fi/Bluetooth baseband and radio are disabled.</li> <li>Light Sleep - The CPU is paused. The RTC memory and RTC peripherals, as well as the ULP coprocessor are running.</li> <li>Deep Sleep - Only the RTC memory and RTC peripherals are powered on. The ULP coprocessor is functional.     <li>Hibernation - Only one RTC timer on the slow clock and certain RTC GPIOs are active.</li> <li>Off - Chip is powered off</li> <p><p>For more information on the power management of the ESP32-WROOM module, pleaser refer to Section 3.7 and Tables: 8 and 17 of the ESP32 SoC Datasheet.</p></p>"},{"location":"single_page/#debugging","title":"Debugging","text":"<p>For users interested in debugging their code, the JTAG pins are broken out on the board. However, the debugging feature is only available through the ESP-IDF.</p> <ul> <li><code>TMS</code>: <code>GPIO 14</code></li> <li><code>TDI</code>: <code>GPIO 12</code></li> <li><code>TCK</code>: <code>GPIO 13</code></li> <li><code>TDO</code>: <code>GPIO 15</code></li> </ul> <p>Note</p> <p>Users should be aware that <code>GPIO 13</code> is connected to the <code>STAT</code> LED with a pull down resistor.</p>"},{"location":"single_page/#firmware-download-mode","title":"Firmware Download Mode","text":"<p>Users can manually force the board into the serial bootloader with the BOOT button. Please, refer to the Boot Button section below for more information.</p>"},{"location":"single_page/#peripherals-and-io","title":"Peripherals and I/O","text":"<p>Warning</p> <p><p>Note: Users should be aware of the following nuances of this board <ul> <li>\u26a1 All the GPIO on the ESP32-WROOM Thing Plus are 3.3V pins.         <ul> <li>The I/O pins are not 5V-tolerant! To interface with higher voltage components, a logic level adapter is recommended.</li> </ul> </li> <li>\u26a1  There are electrical limitations to the amount of current that the ESP32-WROOM module can sink or source. For more details, check out the ESP32-WROOM module datasheet.</li> <li>There are some limitations to the ADC performance, see the Note from the ADC Characteristics section of the ESP32 SoC datasheet.  <p>The ESP32-WROOM module has 26 multifunctional GPIO, of which, 21 I/O pins broken out into a feather form factor layout on this board. All of the ESP32-WROOM Thing Plus (USB-C) pins have a .1\" pitch spacing for headers. With the pin multiplexing capabilities of the ESP32 SoC, various pins can have several functionalities. For more technical specifications on the I/O pins, please refer to the ESP32 SoC datasheet.</p> <ul> <li>13x 12-bit analog to digital converter (ADC) channels</li> <li>3x UARTs (only two are configured by default in the Arduino IDE, one UART is used for bootloading/debug)</li> <li>3x SPI (only one is configured by default in the Arduino IDE)</li> <li>2x I<sup>2</sup>C (only one is configured by default in the Arduino IDE)</li> <li>2x I<sup>2</sup>S Audio</li> <li>2x digital-to-analog converter (DAC) channels</li> <li>16x 20-bit PWM outputs</li> <li>8x Capacitive Touch Inputs</li> </ul> <p> Graphical datasheet for the ESP32-WROOM Thing Plus (USB-C). (Click to enlarge) </p> <p>Note</p> <p>Users should be aware of the following limitations for the board in the Arduino IDE. <ul> <li>Not all of the features, listed above, are available in the Arduino IDE. For the full capabilities of the ESP32, the Espressif IDF should be utilized.</li> <li>Only one I<sup>2</sup>C bus is defined.</li> <li>Only two UART interfaces are available.</li> <ul> <li>UART (USB): <code>Serial</code></li> <li><code>RX</code>/<code>TX</code> Pins: <code>Serial1</code></li> </ul> <li>Only one SPI bus is defined.</li> </ul></p> <p>For digital pins, users will need to declare the <code>pinMode()</code> (link) in the setup of their sketch (programs written in the Arduino IDE) for the pins used.</p>"},{"location":"single_page/#input","title":"Input","text":"<p>When configured properly, an input pin will be looking for a HIGH or LOW state. Input pins are High Impedance and takes very little current to move the input pin from one state to another.</p>"},{"location":"single_page/#output","title":"Output","text":"<p>When configured as an output the pin will be at a HIGH or LOW voltage. Output pins are Low Impedance: This means that they can provide a relatively substantial amount of current to other circuits.</p> <p>Warning</p> <p>\u26a1 There are electrical limitations to the amount of current that the ESP32-WROOM module can sink or source. For more details, check out the ESP32-WROOM module datasheet.</p>"},{"location":"single_page/#additional-functions","title":"Additional Functions","text":"<p>There are several pins that have special functionality in addition to general digital I/O. These pins and their additional functions are listed in the tabs below. For more technical specifications on the I/O pins, you can refer to the schematic, ESP32-WROOM module datasheet, ESP32 SoC datasheet, and documentation for the ESP32 Arduino core.</p>"},{"location":"single_page/#analog-input-pins","title":"Analog Input Pins","text":"<p>The ESP32-WROOM module provides a 12-bit ADC input on thirteen of its I/O pins. This functionality is accessed in the Arduino IDE using the <code>analogRead(pin)</code> function. (*The available ADC pins are highlighted in the image below.)</p> <p></p> <p>Note</p> <p>By default, in the Arduino IDE, <code>analogRead()</code> returns a 10-bit value. To change the resolution of the value returned by the <code>analogRead()</code> function, use the <code>analogReadResolution(bits)</code> function.</p> <p>Note</p> <p><p>To learn more about analog vs. digital signals, check out this great tutorial.</p> <p> Analog vs. Digital </p></p> <p></p> <p> Analog input pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#pwm-and-analog-dac-output-pins","title":"PWM and Analog (DAC) Output Pins","text":"<p>The ESP32-WROOM module supports up to sixteen channels of 20-bit PWM (Pulse Width Modulation) outputs on any of its I/O pins. This is accessed in the Arduino IDE using the <code>analogWrite(pin, value)</code> function or the LED Control API. (*Any I/O pin can be used for the PWM outputs; the available DAC pins, with true analog outputs, are highlighted in the image below.)</p> <p></p> <p>Note</p> <p><p>By default, in the Arduino IDE, <code>analogWrite()</code> accepts an 8-bit value. To change the resolution of the PWM signal for the <code>analogWrite()</code> function, use the <code>analogWriteResolution(bits)</code> function.</p> <p>(*The PWM output is not a true analog signal. For a true analog output, please refer to the DAC API for <code>GPIO 25</code> and <code>GPIO 26</code>.)</p></p> <p>Note</p> <p><p>Note: To learn more about pulse width modulation (PWM), check out this great tutorial.</p> <p> Pulse Width Modulation </p></p> <p> Any I/O pin can be used for a PWM output, but these are the DAC pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#serial-communication-pins","title":"Serial Communication Pins","text":"<p>The ESP32-WROOM module provides three UART ports. By default, the UART port for the USB connection (<code>Serial</code>) and the labeled UART I/O pins on the board (<code>Serial1</code>) can be accessed through the Arduino IDE using the serial communication class.</p> <p></p> <p>Note</p> <p>By default, in the Arduino IDE, the SparkFun ESP32 Thing Plus C board definition supports:       <ul> <li><code>Serial</code> - UART (USB)</li> <li><code>Serial1</code> - Pins: <code>RX</code>/<code>TX</code> (<code>GPIO 16</code>/<code>GPIO 17</code>)</li> </ul> In order to utilize the serial communication on the strapping pins, users will need to create a custom serial port object and declare which pins to access.</p> <p>Note</p> <p><p>Note: To learn more about serial communication, check out this great tutorial.</p> <p> Serial Communication </p></p> <p> Default UART ports on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Note</p> <p><p>We have noticed that with the ESP32 Arduino core, <code>Serial.available()</code> does not operate instantaneously. This is due to an interrupt triggered by the UART, to empty the FIFO when the <code>RX</code> pin is inactive for two byte periods:     <ul> <li>At 9600 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> + 2] x 1 ms = 11 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> <li>At 115200 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> + 2] x .087 ms = ~1 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> </ul> </p> <p>For more information, please refer to this  chatroom discussion.</p></p>"},{"location":"single_page/#spi-communication","title":"SPI Communication","text":"<p>The ESP32-WROOM module provides three SPI buses. By default, in the Arduino IDE, the SPI class is configured to utilize pins <code>GPIO 18</code> (SCK), <code>GPIO 19</code> (POCI), <code>GPIO 23</code> (PICO). These pins share the same SPI bus as the \u00b5SD card slot, which utilizes pin <code>5</code> (<code>SS</code>) for its chip select. In order to utilize the other SPI ports or objects, users will need to create a custom SPI object and declare which pins to access.</p> <p>Note</p> <p>To comply with the latest OSHW design practices, we have adopted the new SPI signal nomenclature (SDO/SDI and PICO/POCI). The terms Master and Slave are now referred to as Controller and Peripheral. The <code>MOSI</code> signal on a controller has been replaced with <code>SDO</code> or <code>PICO</code>. Please refer to this announcement on the decision to deprecate the MOSI/MISO terminology and transition to the SDO/SDI naming convention.</p> <p></p> <p> SCK <code>GPIO 18</code> (<code>SCK</code>) SDI or POCI <code>GPIO 19</code> (<code>MISO</code>) SDO or PICO <code>GPIO 23</code> (<code>MOSI</code>) CS (\u00b5SD Card) <code>GPIO 5</code> (<code>SS</code>) </p> <p>Note</p> <p>To learn more about the serial peripheral interface (SPI) protocol, check out this great tutorial. <p> Serial Peripheral Interface (SPI) </p></p> <p> Default SPI bus connections on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#i2c-communication-pins","title":"I<sup>2</sup>C Communication Pins","text":"<p>The ESP32-WROOM module module can support up to two I<sup>2</sup>C buses. By default, in the Arduino IDE, the Wire class is configured to utilize pins <code>GPIO 21</code> (SDA) and <code>GPIO 22</code> (SCL). These pins share the same I<sup>2</sup>C bus with the Qwiic connector and MAX17048 fuel gauge. In order to utilize the other  I<sup>2</sup>C ports, users will need to create a custom Wire object and declare which pins to access.</p> <p></p> <p> SCL <code>GPIO 22</code> (<code>SCL</code>) SDA <code>GPIO 21</code> (<code>SDA</code>) </p> <p>Note</p> <p>To learn more about the inter-integrated circuit (I<sup>2</sup>C) protocol, check out this great tutorial.</p> <p> I2C </p> <p> </p> <p> Default I<sup>2</sup>C bus connections for the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#buttons","title":"Buttons","text":"<p>There are two buttons on ESP32-WROOM Thing Plus; a RST and BOOT button.</p>"},{"location":"single_page/#reset-button","title":"Reset Button","text":"<p>The RST (reset) button allows users to reset the program running on the ESP32-WROOM module without unplugging the board.</p> <p> RST button on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#boot-button","title":"Boot Button","text":"<p>The BOOT button can be used to force the board into the serial bootloader. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause it to enter the Firmware Download mode. The board will remain in this mode until it power cycles (happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer with through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board. </li> </ul> </li> </ol> <p> BOOT button on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Warning</p> <p>\u26a1 The BOOT button is also connected to <code>GPIO 0</code>, which controls the voltage output to the Qwiic connector. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"single_page/#indicator-leds","title":"Indicator LEDs","text":"<p>There are four indicator LEDs on the ESP32-WROOM Thing Plus:</p> <ul> <li><code>PWR</code>: Power (Red)</li> <li><code>CHG</code>: Battery Charging (Yellow)</li> <li><code>13</code>: <code>GPIO 13</code> (Blue)</li> <li><code>WS2812</code>: <code>GPIO 02</code> (RGB)</li> </ul>"},{"location":"single_page/#power-led","title":"Power LED","text":"<p>The red, power (<code>PWR</code>) LED will light up once 3.3V is supplied to the board. For most users, it will light up when 5V is supplied through the USB connection and/or when a LiPo battery is attached to the JST connector. </p> <p> ESP32-WROOM Thing Plus <code>PWR</code> status LED indicator. (Click to enlarge) </p>"},{"location":"single_page/#battery-charging-led","title":"Battery Charging LED","text":"<p>The yellow, battery charging (<code>CHG</code>) LED indicates the status of the MCP73831 charge management controller. The LED will shut off when no battery is present, when the charge management controller is in standby (after the battery charging has been completed), or when the charge management controller is shutdown. The LED will illuminate when the charge management controller is in the process of charging the battery. For more information, please refer to the MCP73831 datasheet.</p> The battery charging (<code>CHG</code>) LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) Charge Cycle State LED                          Shutdown                         <ul> <li>Thermal Shutdown</li> <li>V<sub>DD</sub> &lt; V<sub>BAT</sub></li> </ul> Off (High Z) No Battery Present Off (High Z) Charge Complete \u2013 Standby Off (H) Preconditioning On (L) Constant-Current Fast Charge On (L) Constant Voltage On (L)"},{"location":"single_page/#stat-led","title":"STAT LED","text":"<p>The blue, status (<code>STAT</code>) LED is typically used as a test or status LED to make sure that a board is working or for basic debugging. This indicator is connected to <code>GPIO 13</code>.</p> <p> The status (<code>STAT</code>) LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#ws2812-rgb-led","title":"WS2812 RGB LED","text":"<p>The WS2812 RGB LED is controlled with a 24-bit (GRB) data signal. This indicator is connected to <code>GPIO 02</code> and the digital output pin from the LED is available through a test point. For more information, please refer to the WS2812C datasheet.</p> <p> <code>WS2812</code> LED indicator on the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>Note</p> <p>The latest ESP32 Arduino core, now provides a basic RGB LED driver for a WS2812 (or NeoPixel) LED populated the board. For an example of how to utilize the RGB LED driver check out the BlinkRGB example code, which can be accessed from the File drop down menu (i.e File &gt; Examples &gt; ESP32 &gt; GPIO &gt; BlinkRGB).</p>"},{"location":"single_page/#sd-slot","title":"\u00b5SD Slot","text":"<p>Note</p> <p>To comply with the latest OSHW design practices, we have adopted the new SPI signal nomenclature (SDO/SDI and PICO/POCI). The terms Master and Slave are now referred to as Controller and Peripheral. Please refer to this announcement on the decision to transition to the new naming convention.</p> <p>The ESP32-WROOM Thing Plus (USB-C) includes an \u00b5SD card slot. This is great for data logging applications or storing files. The \u00b5SD card slot is connected to the following dedicated GPIO:</p> <ul> <li><code>GPIO 5</code>: <code>DATA 3</code>/<code>CS</code></li> <li><code>N/A</code>: <code>DATA 2</code></li> <li><code>N/A</code>: <code>DATA 1</code></li> <li><code>GPIO 19</code>: <code>DATA 0</code>/<code>POCI</code> (or Peripheral's <code>SDO</code>)</li> <li><code>GPIO 18</code>: <code>CLK</code>/<code>SCK</code></li> <li><code>GPIO 23</code>: <code>CMD</code>/<code>PICO</code> (or Peripheral's <code>SDI</code>)</li> </ul> <p> \u00b5SD card slot on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>There are two jumpers on the back of the board that can be used to easily modify the hardware connections on the board.</p> <ul> <li>SHLD - This jumper can be used to disconnect the USB shield from <code>GND</code>.</li> <li>PWR - This jumper can be used to remove power to the <code>PWR</code> LED. </li> <li>CHG LED - This jumper can be used to remove power to the <code>CHG</code> LED.<ul> <li>Avoid cutting the box's silkscreen; there are traces under it:  Traces around the <code>CHG LED</code> jumper. (Click to enlarge) </li> </ul> </li> </ul> <p>Note</p> <p><p>Never modified a jumper before? Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <p> How to Work with Jumper Pads and PCB Traces </p></p> <p> The jumpers on the back of the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#primary-i2c-bus","title":"Primary I<sup>2</sup>C Bus","text":"<p>The Qwiic connector and battery fuel gauge are attached to the primary I<sup>2</sup>C bus. The primary I<sup>2</sup>C bus for this board utilizes the pin connections, detailed in the table below:</p> <p>                  Connection              <code>VDD</code> <code>GND</code> <code>SCL</code> <code>SDA</code>                  Battery Fuel Gauge (MAX17048) <code>VBAT</code> GND <code>GPIO 22</code> <code>GPIO 21</code>                  Qwiic Connector              <code>GPIO 0</code> (Enables 3.3V) GND <code>GPIO 22</code> <code>GPIO 21</code> </p>"},{"location":"single_page/#battery-fuel-gauge","title":"Battery Fuel Gauge","text":"<p>The MAX17048 fuel gauge measures the approximate charge or discharge rate, state of charge (SOC) (based on ModelGauge algorithm), and voltage of a connected battery. Additionally, the chip is powered directly from <code>VBAT</code>, when a LiPo battery is connected. For more information, please refer to the MAX17048 datasheet.</p> The MAX17048 fuel gauge on the ESP32-WROOM Thing Plus. (Click to enlarge) I<sup>2</sup>C Address 0x36 (7-bit) 0x6C (write)/0x6D (read)                      Voltage Measurement                          Range: 2.5 - 5 V                         Precision: \u00b17.5 mV/Cell                         Resolution 1.25 mV/Cell                      Current Consumption                          Sleep: .5 - 2 \u00b5A                         Hibernate: 3 - 5 \u00b5A                         Active: 23 - 40 \u00b5A                      <p>Note</p> <p>The <code>Alert</code> pin for the MAX17048 is not connected and cannot be utilized.</p>"},{"location":"single_page/#qwiic-connector","title":"Qwiic Connector","text":"<p>A Qwiic connector is provided for users to seamlessly integrate with SparkFun's Qwiic Ecosystem.</p> <p> Qwiic connector and I<sup>2</sup>C pins on the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#power-control_1","title":"Power Control","text":"<p>In order to enable power for the Qwiic connector, users must toggle <code>GPIO 0</code> high. This enables the power output from the XC6222 LDO regulator to the Qwiic connector, which can sources up to 700mA at 3.3V . In order to conserve battery power or in low power applications, users will can toggle <code>GPIO 0</code> low, to disable the power to the Qwiic connector.</p> <p>Warning</p> <p>\u26a1 <code>GPIO 0</code> is also connected to the BOOT button. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"single_page/#what-is-qwiic","title":"What is Qwiic?","text":"<p>The Qwiic system is intended a quick, hassle-free cabling/connector system for I<sup>2</sup>C devices. Qwiic is actually a play on words between \"quick\" and I<sup>2</sup>C or \"iic\".</p> <p> <p></p> <p>Features of the Qwiic System</p> <p>No Soldering - Keep your soldering iron at bay <p>Cables plug easily between boards making quick work of setting up a new prototype. We currently offer three different lengths of Qwiic cables as well as a breadboard friendly cable to connect any Qwiic enabled board to anything else. Initially you may need to solder headers onto the shield to connect your platform to the Qwiic system but once that\u2019s done it\u2019s plug and go!</p> Qwiic cables connected to Spectral Sensor Breakout <p>Polarized Connector - Minimize your mistakes</p> <p>How many times have you swapped the SDA and SCL wires on your breadboard hoping the sensor will start working? The Qwiic connector is polarized so you know you\u2019ll have it wired correctly, every time, from the start.</p> <p>The PCB connector is part number SM04B-SRSS (Datasheet) or equivalent. The mating connector used on cables is part number SHR04V-S-B or equivalent. This is a common and low cost connector.</p> 1mm pitch, 4-pin JST connector <p>Daisy Chain - Expand with ease</p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them allowing multiple devices to be connected.</p> <p> Shown above: Qwiic Shield for Arduino on RedBoard, Spectral Sensor Breakout - NIR, Spectral Sensor Breakout - Visible and SparkFun GPS Breakout</p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"single_page/#usb-programming","title":"USB Programming","text":"<p>The USB connection is utilized for programming and serial communication. Users only need to plug their ESP32-WROOM Thing Plus into a computer using a USB-C cable.</p> <p> The ESP32-WROOM Thing Plus with USB-C cable attached. (Click to enlarge) </p>"},{"location":"single_page/#battery","title":"Battery","text":"<p>For remote IoT applications, a Li-Po battery can be connected. Additionally, users may be interested in utilizing a solar panel and USB-C cable to recharge their battery.</p> The ESP32-WROOM Thing Plus with a battery connected. (Click to enlarge) Solar Panel Charger - 10W              TOL-16835          USB 3.1 Cable A to C - 3 Foot              TOL-14743          <p>Note</p> <p><p>DO NOT remove batteries by pulling on their wires. Instead, it is recommended that pair of dikes (i.e. diagonal wire cutters), pliers, or tweezers be used to pull on the JST connector housing, to avoid damaging the battery wiring.</p> <p> Using a pair of dikes to disconnect a battery. (Click to enlarge) </p></p>"},{"location":"single_page/#headers","title":"Headers","text":"<p>The pins for the ESP32-WROOM Thing Plus are broken out to 0.1\"-spaced pins on the outer edges of the board. When selecting headers, be sure you are aware of the functionality you need. If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <p> Soldering headers to the ESP32-WROOM Thing Plus. (Click to enlarge) </p> <p>The Feather Stackable Header Kit is a great option as it allows users to stack shields (w/ Feather footprint) or it can be placed on a breadboard; while the pins are still accessible from the female/male headers.</p>"},{"location":"single_page/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The ESP32-WROOM Thing Plus (USB-C) includes an \u00b5SD card slot on the back of the board. The cardholder functions through a push/pull operation. (The card slot doesn't include a spring retention mechanism; cards are held in place through friction.)</p> <p> Users can slide-in or pull-out a \u00b5SD card from the cardholder. (Click to enlarge) </p>"},{"location":"single_page/#qwiic-devices","title":"Qwiic Devices","text":"<p>The Qwiic system allows users to effortlessly prototype with a Qwiic compatible I<sup>2</sup>C device without soldering. Users can attach any Qwiic compatible sensor or board, with just a Qwiic cable. (*The example below, is for demonstration purposes and is not pertinent to the board functionality or this tutorial.)</p> <p> The BME688 environmental and VL53L1X distance Qwiic sensor boards connected to the ESP32-WROOM Thing Plus. (Click to enlarge) </p>"},{"location":"single_page/#software-overview","title":"Software Overview","text":""},{"location":"single_page/#ch340-driver","title":"CH340 Driver","text":"<p>Users will need to install the appropriate driver for their computer to recognize the serial-to-UART chip on their board/adapter. Most of the latest operating systems will recognize CH340C chip on the board and automatically install the required driver.</p> <p>To manually install the CH340 driver on their computer, users can download it from the WCH website. For more information, check out our How to Install CH340 Drivers Tutorial.</p> <p> How to Install CH340 Drivers </p>"},{"location":"single_page/#arduino-ide","title":"Arduino IDEWhat is an Arduino?Installing Arduino IDEInstalling an Arduino LibraryInstalling Board Definitions in the Arduino IDE","text":"<p>Note</p> <p>For first-time users, who have never programmed before and are looking to use the Arduino IDE, we recommend beginning with the SparkFun Inventor's Kit (SIK), which includes a simpler board like the Arduino Uno or SparkFun RedBoard and is designed to help users get started programming with the Arduino IDE.</p> <p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. To get started with using the Arduino IDE, check out our tutorials below:</p>"},{"location":"single_page/#install-board-definition","title":"Install Board Definition","text":"<p>Install the latest ESP32 board definitions in the Arduino IDE.</p> <p> Installing Board Definitions in the Arduino IDE </p> <p>Note</p> <p><p>For more instructions, users can follow this tutorial on Installing Additional Cores provided by Arduino. Users will also need the <code>.json</code> file for the Espressif Arduino core:</p> <p> <code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</code> </p></p> <p>When selecting a board to program in the Arduino IDE, users should select the SparkFun ESP32 Thing Plus C from the Tools drop-down menu (_i.e. Tools &gt; Board &gt; ESP32 Arduino &gt; SparkFun ESP32 Thing Plus C). Alternatively, users can also select the ESP32 Dev Module; however, they may lose some pin assignments (i.e. <code>LED_BUILTIN</code>).</p> <p> Select the SparkFun ESP32 Thing Plus C from the Tools drop-down menu in the Arduino IDE. (Click to enlarge) </p>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>Note</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"single_page/#upload-issues","title":"Upload Issues","text":"<p>If users have issues during the uploading process, they can try to manually force the board into the serial bootloader with the BOOT button. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause the MCU to enter the Firmware Download mode and its serial bootloader. The board will remain in this mode until it power cycles (which happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board. </li> </ul> </li> </ol> <p> BOOT button on the ESP32-WROOM Thing Plus. (Click to enlarge)</p>"},{"location":"single_page/#com-port-not-shown","title":"COM Port Not Shown","text":"<p>If the board doesn't appear on a COM port, double check the correct driver has been installed. Unlike previous versions of the ESP32 Thing Plus, this variant requires the CH340 driver to be installed. For more information, check out our How to Install CH340 Drivers Tutorial.</p> <p> How to Install CH340 Drivers </p> <p>Users can also check their USB cable; some cables are power only. Try testing the cable with a smartphone or tablet to see if it appears as a device on the computer. If the phone/tablet doesn't appear, then the USB cable is power only.</p>"},{"location":"single_page/#serial-stream-difficulties","title":"<code>Serial</code> Stream Difficulties","text":"<p>We have noticed that with the ESP32 Arduino core, <code>Serial.available()</code> does not operate instantaneously. This is due to an interrupt triggered by the UART, to empty the FIFO when the <code>RX</code> pin is inactive for two-byte periods:</p> <ul> <li>At 9600 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> + 2] x 1 ms = 11 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> <li>At 115200 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> +2] x .087 ms = ~1 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> </ul> <p>For more information, please refer to this chatroom discussion.</p>"},{"location":"single_page/#sd-card","title":"\u00b5SD Card","text":"<p>Make sure that the \u00b5SD card is compatible with the Arduino library being used for it.   For example, the default SD Arduino library is only compatible with <code>FAT16</code> or <code>FAT32</code> file systems; therefore, the card capacity is limited to 16GB or 32GB and smaller. Another consideration is that the library was also written to only handle short 8.3 names for files.</p>"},{"location":"single_page/#qwiic-connector-power","title":"Qwiic Connector Power","text":"<p>For users having issues with the power to their Qwiic devices, don't forget that <code>GPIO 0</code> controls the power output from the XC6222 LDO regulator to the Qwiic connector. Users must toggle <code>GPIO 0</code> high to enable power for the Qwiic connector. In order to conserve battery power or in low-power applications, users will toggle <code>GPIO 0</code> low, to disable the power to the Qwiic connector.</p> <p>Note</p> <p><code>GPIO 0</code> is also connected to the BOOT button. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"single_page/#current-consumption_1","title":"Current Consumption","text":"<p>For ultra-low power projects, these are the current consumption of the individual components, as specified in their datasheet:</p> <ul> <li>XC6222 LDO Regulator:                     <ul> <li>Supply Current: 100 - 220 \u00b5A</li> </ul> </li> <li>MCP73831 Charger Controller:                     <ul> <li>Supply Current:                             <ul> <li>510 - 1500 \u00b5A (Charging)</li> <li>53 - 200 \u00b5A (Charge complete; no battery)</li> </ul> </li> <li>Constant-Voltage Mode                             <ul> <li>Line/Load regulation: 100 - 50 mA</li> </ul> </li> <li>Fast Charge Constant-Current Mode                             <ul> <li>Fast Charge Current: 450 - 550 mA</li> </ul> </li> <li>Battery Detection Current: 6 \u00b5A</li> <li>Leakage Current: up to 2\u00b5A</li> <li>Status Indicator:                             <ul> <li>Sink Current: 25 mA</li> </ul> </li> </ul> </li> <li>MAX17048 Fuel Gauge:                     <ul> <li>Supply Current:                             <ul> <li>Sleep: 0.5 - 2 \u00b5A</li> <li>Hibernate: 3 - 5 \u00b5A</li> <li>Active: 23 - 40 \u00b5A</li> </ul> </li> <li>I<sup>2</sup>C: 0.2 - 0.4 \u00b5A</li> </ul> </li> </ul> <ul> <li>CH340C Serial-to-UART Bridge:                     <ul> <li>Supply Current: 4 - 12 mA                             <ul> <li>USB Suspended: 0.04 - 0.15 mA</li> </ul> </li> </ul> </li> <li>ESP32 SoC:                     <ul> <li>Rec Supply current: 500 mA</li> <li>Active: 95 - 240 mA                             <ul> <li>w/ RF Transceiver:                                     <ul> <li>TX: up to 380 mA</li> <li>RX: Up to 118 mA</li> </ul> </li> </ul> </li> <li>Sleep Modes:                             <ul> <li>Modem: 20 - 68 mA</li> <li>Light: .8 mA</li> <li>Deep: 10 - 150 \u00b5A</li> <li>Hibernation: 5 \u00b5A</li> <li>Off: 1\u00b5A</li> </ul> </li> </ul> </li> <li>WS2812 RGB LED:                     <ul> <li>Supply Current: 1\u00b5A (@5V)</li> <li>LEDs: 5mA each (@5V)</li> </ul> </li> </ul>"},{"location":"single_page/#resources","title":"Resources:","text":""},{"location":"single_page/#product-resources","title":"Product Resources","text":"<ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> <li>Graphical Datasheet (PDF)</li> <li>SFE Product Showcase Video</li> <li>GitHub Hardware Repo</li> </ul>"},{"location":"single_page/#additional-resources","title":"Additional Resources","text":"<ul> <li>SparkFun Learn - Hookup Guide</li> <li>SparkFun Thing Plus Boards</li> <li>SparkFun Qwiic Connect System</li> <li>SparkFun Technical Assistance</li> </ul>"},{"location":"single_page/#hardware-component-documentation","title":"Hardware Component Documentation","text":"<ul> <li>ESP32 Module<ul> <li>ESP32-WROOM Module (PDF)<ul> <li>ESP32 SoC (PDF)</li> </ul> </li> </ul> </li> <li>Power Components<ul> <li>Voltage Regulator: XC6222 (PDF)</li> <li>Battery:<ul> <li>Charge Controller: MCP73831 (PDF)</li> <li>Fuel Gauge: MAX17048 (PDF)</li> </ul> </li> </ul> </li> <li>LED: WS2812 (PDF)</li> </ul>"},{"location":"single_page/#manufacturers-resources","title":"Manufacturer's Resources","text":"<p>Espressif also provides great resources for their ESP32 module: </p> <ul> <li>ESP32 Product Resource Page</li> <li>Espressif's Forum for the ESP32</li> <li>Espressif GitHub Repositories<ul> <li>ESP32 Arduino Core<ul> <li><code>.json</code> file needed for Epressif's ESP32 Arduino Core: <code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</code></li> </ul> </li> <li>ESP-IDF -- IoT Development Framework<ul> <li>Programming Guide.</li> </ul> </li> </ul> </li> </ul>"},{"location":"software_overview/","title":"Software Overview","text":""},{"location":"software_overview/#ch340-driver","title":"CH340 Driver","text":"<p>Users will need to install the appropriate driver for their computer to recognize the serial-to-UART chip on their board/adapter. Most of the latest operating systems will recognize CH340C chip on the board and automatically install the required driver.</p> <p>To manually install the CH340 driver on their computer, users can download it from the WCH website. For more information, check out our How to Install CH340 Drivers Tutorial.</p> <p> How to Install CH340 Drivers </p>"},{"location":"software_overview/#arduino-ide","title":"Arduino IDEWhat is an Arduino?Installing Arduino IDEInstalling an Arduino LibraryInstalling Board Definitions in the Arduino IDE","text":"<p>Note</p> <p>For first-time users, who have never programmed before and are looking to use the Arduino IDE, we recommend beginning with the SparkFun Inventor's Kit (SIK), which includes a simpler board like the Arduino Uno or SparkFun RedBoard and is designed to help users get started programming with the Arduino IDE.</p> <p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. To get started with using the Arduino IDE, check out our tutorials below:</p>"},{"location":"software_overview/#install-board-definition","title":"Install Board Definition","text":"<p>Install the latest ESP32 board definitions in the Arduino IDE.</p> <p> Installing Board Definitions in the Arduino IDE </p> <p>Note</p> <p><p>For more instructions, users can follow this tutorial on Installing Additional Cores provided by Arduino. Users will also need the <code>.json</code> file for the Espressif Arduino core:</p> <p> <code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</code> </p></p> <p>When selecting a board to program in the Arduino IDE, users should select the SparkFun ESP32 Thing Plus C from the Tools drop-down menu (_i.e. Tools &gt; Board &gt; ESP32 Arduino &gt; SparkFun ESP32 Thing Plus C). Alternatively, users can also select the ESP32 Dev Module; however, they may lose some pin assignments (i.e. <code>LED_BUILTIN</code>).</p> <p> Select the SparkFun ESP32 Thing Plus C from the Tools drop-down menu in the Arduino IDE. (Click to enlarge) </p>"},{"location":"troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Note</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"troubleshooting_tips/#upload-issues","title":"Upload Issues","text":"<p>If users have issues during the uploading process, they can try to manually force the board into the serial bootloader with the BOOT button. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause the MCU to enter the Firmware Download mode and its serial bootloader. The board will remain in this mode until it power cycles (which happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board. </li> </ul> </li> </ol> <p> BOOT button on the ESP32-WROOM Thing Plus. (Click to enlarge)</p>"},{"location":"troubleshooting_tips/#com-port-not-shown","title":"COM Port Not Shown","text":"<p>If the board doesn't appear on a COM port, double check the correct driver has been installed. Unlike previous versions of the ESP32 Thing Plus, this variant requires the CH340 driver to be installed. For more information, check out our How to Install CH340 Drivers Tutorial.</p> <p> How to Install CH340 Drivers </p> <p>Users can also check their USB cable; some cables are power only. Try testing the cable with a smartphone or tablet to see if it appears as a device on the computer. If the phone/tablet doesn't appear, then the USB cable is power only.</p>"},{"location":"troubleshooting_tips/#serial-stream-difficulties","title":"<code>Serial</code> Stream Difficulties","text":"<p>We have noticed that with the ESP32 Arduino core, <code>Serial.available()</code> does not operate instantaneously. This is due to an interrupt triggered by the UART, to empty the FIFO when the <code>RX</code> pin is inactive for two-byte periods:</p> <ul> <li>At 9600 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> + 2] x 1 ms = 11 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> <li>At 115200 baud, <code>hwAvailable</code> takes [<code>number of bytes received</code> +2] x .087 ms = ~1 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</li> </ul> <p>For more information, please refer to this chatroom discussion.</p>"},{"location":"troubleshooting_tips/#sd-card","title":"\u00b5SD Card","text":"<p>Make sure that the \u00b5SD card is compatible with the Arduino library being used for it.   For example, the default SD Arduino library is only compatible with <code>FAT16</code> or <code>FAT32</code> file systems; therefore, the card capacity is limited to 16GB or 32GB and smaller. Another consideration is that the library was also written to only handle short 8.3 names for files.</p>"},{"location":"troubleshooting_tips/#qwiic-connector-power","title":"Qwiic Connector Power","text":"<p>For users having issues with the power to their Qwiic devices, don't forget that <code>GPIO 0</code> controls the power output from the XC6222 LDO regulator to the Qwiic connector. Users must toggle <code>GPIO 0</code> high to enable power for the Qwiic connector. In order to conserve battery power or in low-power applications, users will toggle <code>GPIO 0</code> low, to disable the power to the Qwiic connector.</p> <p>Note</p> <p><code>GPIO 0</code> is also connected to the BOOT button. Therefore, pressing the BOOT button will momentarily disable power to the Qwiic connector.</p>"},{"location":"troubleshooting_tips/#current-consumption","title":"Current Consumption","text":"<p>For ultra-low power projects, these are the current consumption of the individual components, as specified in their datasheet:</p> <ul> <li>XC6222 LDO Regulator:                     <ul> <li>Supply Current: 100 - 220 \u00b5A</li> </ul> </li> <li>MCP73831 Charger Controller:                     <ul> <li>Supply Current:                             <ul> <li>510 - 1500 \u00b5A (Charging)</li> <li>53 - 200 \u00b5A (Charge complete; no battery)</li> </ul> </li> <li>Constant-Voltage Mode                             <ul> <li>Line/Load regulation: 100 - 50 mA</li> </ul> </li> <li>Fast Charge Constant-Current Mode                             <ul> <li>Fast Charge Current: 450 - 550 mA</li> </ul> </li> <li>Battery Detection Current: 6 \u00b5A</li> <li>Leakage Current: up to 2\u00b5A</li> <li>Status Indicator:                             <ul> <li>Sink Current: 25 mA</li> </ul> </li> </ul> </li> <li>MAX17048 Fuel Gauge:                     <ul> <li>Supply Current:                             <ul> <li>Sleep: 0.5 - 2 \u00b5A</li> <li>Hibernate: 3 - 5 \u00b5A</li> <li>Active: 23 - 40 \u00b5A</li> </ul> </li> <li>I<sup>2</sup>C: 0.2 - 0.4 \u00b5A</li> </ul> </li> </ul> <ul> <li>CH340C Serial-to-UART Bridge:                     <ul> <li>Supply Current: 4 - 12 mA                             <ul> <li>USB Suspended: 0.04 - 0.15 mA</li> </ul> </li> </ul> </li> <li>ESP32 SoC:                     <ul> <li>Rec Supply current: 500 mA</li> <li>Active: 95 - 240 mA                             <ul> <li>w/ RF Transceiver:                                     <ul> <li>TX: up to 380 mA</li> <li>RX: Up to 118 mA</li> </ul> </li> </ul> </li> <li>Sleep Modes:                             <ul> <li>Modem: 20 - 68 mA</li> <li>Light: .8 mA</li> <li>Deep: 10 - 150 \u00b5A</li> <li>Hibernation: 5 \u00b5A</li> <li>Off: 1\u00b5A</li> </ul> </li> </ul> </li> <li>WS2812 RGB LED:                     <ul> <li>Supply Current: 1\u00b5A (@5V)</li> <li>LEDs: 5mA each (@5V)</li> </ul> </li> </ul>"},{"location":"board_files/","title":"board_files directory","text":"<ol> <li>A <code>dimensions.pdf</code> file containing the board's measurements.</li> <li>A <code>schematic.pdf</code> file containing the board's schematic.</li> <li>An <code>eagle_files.zip</code> folder containing the Eagle CAD schematic (<code>*.sch</code>) and PCB design (<code>*.brd</code>) files.<ul> <li>A freeware version of Autodesk Eagle can be found here. </li> </ul> </li> </ol>"},{"location":"component_datasheets/","title":"component_documentation directory","text":"<p>A copy of the datasheets, user manuals, programming guides, etc. of the major electrical components on the board.</p> <ul> <li>ESP32 Module<ul> <li>ESP32-WROOM Module (PDF)<ul> <li>ESP32 SoC (PDF)</li> </ul> </li> </ul> </li> <li>Power Components<ul> <li>Voltage Regulator: XC6222 (PDF)</li> <li>Battery:<ul> <li>Charge Controller: MCP73831 (PDF)</li> <li>Fuel Gauge: MAX17048 (PDF)</li> </ul> </li> <li>Fuse: BAT20J (PDF)</li> </ul> </li> <li>LED: WS2812 (PDF)</li> <li>USB-to-UART: CH340 (PDF)</li> </ul>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Thing Plus - ESP32 WROOM (USB-C) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Thing Plus - ESP32 WROOM (USB-C) repository. </li> </ul>"},{"location":"github/contribute/#sumbit-a-design-improvement","title":"Sumbit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors to this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Thing Plus - ESP32 WROOM (USB-C) repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Thing Plus - ESP32 WROOM (USB-C) repository. </li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"img/","title":"img directory","text":"<p>This folder should contain the images for the product documentation</p>"},{"location":"img/#general-images","title":"General Images","text":"<ul> <li><code>sfe_logo_sm.png</code> - SparkFun flame logo (links to the homepage)</li> <li><code>sfe_logo_sq.png</code> - SparkFun flame logo (favicon for webpage)</li> </ul>"},{"location":"img/#directory","title":"Directory","text":"<ul> <li><code>hookup_guide</code> - Images for the hookup guide pages</li> <li><code>charge_profiles</code> - Charge profiles based on battery voltage and board configuration</li> <li><code>fuel_gauge_example</code> - Images illustrating fuel gauge operation</li> </ul>"},{"location":"img/charge_profiles/","title":"img/charge_profiles directory","text":"<p>This folder should contain the images for the board's charge profile based on the battery voltage and board configuration</p>"},{"location":"img/fuel_gauge_example/","title":"img/fuel_gauge_example directory","text":"<p>This folder should contain the images for the fuel gauge Arduino example</p>"},{"location":"img/hookup_guide/","title":"img/hookup_guide directory","text":"<p>This folder should contain the images for the hookup guide pages</p>"},{"location":"img/hookup_guide/#hardware-overview","title":"Hardware Overview","text":"<ul> <li><code>dimensions.jpg</code> - Board Dimensions</li> <li><code>power_connections.jpg</code> - An annotated image of the potential power connections</li> <li><code>LED_pwr.jpg</code> - An annotated image of the power LED</li> <li><code>LED_chg.jpg</code> - An annotated image of the charge LED</li> <li><code>LED_stat.jpg</code> - An annotated image of the status LED</li> <li><code>LED_WS2812.jpg</code> - An annotated image of the WS2812 LED</li> <li><code>usb_connector.jpg</code> - An annotated image of the USB connector</li> <li><code>MAX3421E.jpg</code> - An annotated image of the MAX3421E USB peripheral/host controller</li> <li><code>pins_spi.jpg</code> - An annotated image of the SPI pins</li> <li><code>pins_io.jpg</code> - An annotated image of the shield's I/O pins</li> <li><code>pins_gpio.jpg</code> - An annotated image of the MAX3421E's GPIO pins</li> <li><code>button_reset.jpg</code> - An annotated image of the reset button</li> <li><code>jumpers.jpg</code> - An annotated image of all the jumpers</li> </ul>"},{"location":"img/hookup_guide/#hardware-assembly","title":"Hardware Assembly","text":"<ul> <li><code>assembly_usb.jpg</code> - Image of board w/ USB cable connected</li> <li><code>assembly_headers.jpg</code> - Image of board w/ headers being soldered</li> </ul>"},{"location":"img/hookup_guide/#software-overview","title":"Software Overview","text":"<ul> <li><code>arduino_library.jpg</code> - Image of the Arduino library being selected in the Arduino IDE</li> <li><code>board_selection.jpg</code> - Image of the board definition being selected in the Arduino IDE</li> </ul>"}]}